%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 22.1.0%%For: (Andy Needham) ()%%Title: (02_02_logo_ai8.ai)%%CreationDate: 15/08/2018 09:37%%Canvassize: 16383%%BoundingBox: -342 -158 342 159%%HiResBoundingBox: -341.3911 -157.5777 341.3006 158.3445%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 0.5 -0.5 0.5 -0.5%AI3_TileBox: -403 -279.5 380 279.5%AI3_DocumentPreview: None%AI5_ArtSize: 1920 1080%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1012 667 0.51 1348 719 18 1 0 6 43 0 0%AI5_OpenViewLayers: 7%%PageOrigin:860 540%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 60 8%%BeginData: 7566 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1BFFA7AC818181ADADCFFD75FFA781565C5CADAEFD76FFAEAC80%5C56ACAEFD6CFFCFCEA8FD09FF8280565C81CFFD0AFFA8AFA8AFA8FFA8FD%5DFFCECFFD08FFCF80805C81ADFD07FFA88459350D0D0C350C0D0C353584%84FD58FFCFCDCFFD08FFA656805681A8FD05FFA8840D0D0C0C060D0C0D0C%0D0C0D0C0D060C0C357EFD55FFCDA7FD07FFCF825C8056ACFD06FF590D0C%0D0C0D0C0D0C0D0C0D0C0D0C0D0C0D0C0D0C0D0D5AA8FD51FFCEA6FD07FF%AE8156805682FD04FFAF840C0C060D0C0D060C060C0C352F59355A35350C%0D0C0C060D060D35FD4FFFCFA5CFFD07FF815C815CACFD04FFA8350C0D0C%130C0D0C353584A8FD0AFFAF7E5A0D0D0C0D0D84FD4DFFA5CEFD07FF8256%805681FD04FF840D060D0C0D060D2F84A8FD11FF84350C0C0635A8FD4AFF%CECCCFFD06FFAD56805C81CFFFFFFF7E0D0C0D0C0D0C3584FD16FFAF590D%062F84FD48FFA8CDA6FD06FFCF56805680A7FFFFFF7E0C060D0C0C0C84FD%1AFFA859060C7EFD47FFCEA5CFFD06FF81805C8082FFFFFF840D0C130C0D%2FFD1EFFA80C0D84FD46FFA5CDCFFD05FF82805C8056FFFFFFA80D0C0D0C%0C35FD21FF2F0C7EFD44FFCECDA6FD06FF815C805CACFFFFFF350C0D0C0D%35FD23FF590D84FD43FFCDA5CEFD05FFAD56805680A8FFFF84060D0C0C35%FD25FF590DA8FD42FFC8CDCEFD05FF81805C8082FFFFFF0D0D0C0D35FD27%FF8435FD41FFA7CDA5CFFD04FFA7805C8056AEFFFF59FD040CFD29FF5A59%FD40FFCEA5CDCFFD04FFAD56805C81CFFFFF350C0D0C84FD2AFF5AA8FD3F%FFA6CDA5CFFD04FF815C568081FFFFA8060D0635FD2CFF59FD3FFFCDA5CD%CFFFFFFFCF815C815CADFFFF590D0C0DA8FD2DFFA8FD3EFFA5CDA5FD04FF%AE56805680A7FFA9350C0C2FFD6DFFCDA6CDCFFFFFFFA6805C805CFFFFAF%0C0D0CA9FD6DFFA5CDA5CFFFFFFFA656805680A8FF5A0C0635FD07FF5A0C%35A8FD09FF5A352F84FD28FFCFFFA8FFCFFFA8FFCFFFA8FD09FFA8AEA7CF%FD0CFFA8AEA7CFFD06FFCDC8CDCFFFFFFF81805C8081FFFF600C0D5AFD07%FF350D0CFD0AFF5A060C5AFD1FFF595A84FD05FFCF815C81808180818081%5C81ADFD06FFAD81805C805C8182FD07FFCFAD81805C808081A6FD04FFA5%CDA5CFFFFFFF8156805681FFFF350C06A8FD07FF59060DA8FD09FF592F0C%84FD1EFFA80D0635FD05FFCF5C80565C565C565C565C56ADFD04FFA88156%80565C5680565C56ADFD04FFA7805680565C5680565C5CCFFFFFCDA5CDCE%FFFFFF81805C8081FFFF590C0DAFFD07FF350D0CAFFD2CFF0C0D35FD05FF%AE815C8182AC82AC82AC82ACA8FFFFFFAE805C805CACA7AD82815C5C81FF%FFFFA7805C805CACA7AD82805C805CCFFFA6CDA5CEFFFFFF8256805681FF%FF0C0C2FFD08FF35060DA8FFFFFFA8847E84A8FFA8847EAFFFFFA88459AF%FFA8595A59AFFD07FFAF595A5984A8FD04FFAF590D063584847EFFFFCF56%5C82FD0CFF81568081CFFD04FFA8815CCFFFFFAE80568081FD05FFA88156%5C5CFFCEA5CDCDFFFFFF81805C8081FFFF350C5AFD08FF350D0CFD04FF35%0C0D35FFFF84060D84FFFFAF0C0D59840C0D0C0D0CA9FD05FF840C0D0C0C%0C137EFFFFFF590C0C350C0D0C0DFFFFAE815CACFD0BFFAD5C8081FD0CFF%AD5C8081FD08FF815C80A7C9CCA5CDCFFFFFA656805681FFFF2F0C59FD08%FF35060DA8FFFF35060C35FFFFFF590C0C84FFFFA80D0C0D060D0C0D0C0C%0CFD04FF84060C0C592F0D060C5AFFFF5A0C0D0C0D0C0D0CFFFFCF565C82%FD0BFF815C56ADFD0CFF805C56CFFD08FFA75C5681CFA5CDA5CEFFFF8280%5C805CFFFF590684FD08FF350D0CFFFF59060D59FD04FF84060D84FFFFFF%0C0D0C5AAFFF84350C0D5AFFFFAF0C0D0DAFFFFFA82F0C35AFFFAFA90C0D%2FFFA9AFFFFFCF805681A7ADA6ADA6AD82CFFFFFFF815C81CFFD0BFFAE80%5C81FD0AFF80805CA8CDA5CDA6FFFFAD56805680A7FF350C59FD08FF5906%0DA85A060C35FD05FF590C0684FFFFA80D0C2FA8FFFFFF590C0659FFFF59%0C06A8FD04FF7E0C0684FFFFA80D0635FD05FFCF5680565C565C565C565C%82FFFFFF568080FD0CFFAE565C81FD09FFCF815680FFCECDA6CDCFFFAE80%5C805CADFF840684FD08FF350D0C5A0C0D0DFD06FF840C0D84FFFFFF0C0D%59FD04FFAF0C0D59FFFF350C3584AF84AFA8840C0D59FFFFFF0C0D35FD05%FFCF805C818081808180815CCFFFFFFF815C81FD0CFFAE805C82FD0AFF81%805CFFCFA5CDA5CEFFFF56805C5C82FF840C59FD08FF590C0D0C0D0C0C7E%FD05FF590C0684FFFFA80D065AFD04FF840D065AFFFF0D0C0C0C060C060C%060C0635FFFFA80D0635FD05FFCF5C5C81FFCFFFAEFFCFFD05FF5C805CCF%FD0CFF56805CFD09FFA8805681FFCFCDA6CDA5FFFF8156805C81FFAF0C60%FD08FF350D0C0D0D0D0C0DA8FD04FF840C0D84FFFFAF0C0D59FD04FFA90C%0D59FFFF350C0D5960595A5960595A7EFFFFAF0C0D35FD05FFAE815CACFD%0BFFAC568082FD0CFF815680A7FD08FFAD568082FFFFA6CDA5CCA6FF825C%568056CFFF0D35FD08FF35060D2FFF590C0635FD04FF590C0684FFFFA80D%065AFD04FF840C065AFFFF350C0CA9FD0AFFA80D0659FD05FFCF565C82FD%0BFFA75C5680A7FD06FFCF82FFFFFFA75C5680A8FD06FFAE565C56CFFFFF%FFA6CDA6CDCFFF5C805C80A6FF5935FD08FF350D0CFFFFFF2F0D0C84FFFF%FF840C0D84FFFFFF0C0D59FD04FFAF0C0D59FFFFAF0C0D2FFD04FFAF35AF%FD04FF0C0D2FFD05FFAE815CACFD0CFF82805C81A7FD04FFCF808081FFFF%FF81805C81A7FD04FFAD5C805CACFD04FFCEA5CDA5CDFF8156805681FFA9%0CFD08FF35060DA8FFFFAF0C0C0CAFFFFF590C0C84FFFFA80D065AFD04FF%840D065AFFFFFF5A060C0C605A590C0C0CFD04FF0D0C0D2F352FFFFFCF56%805C8056815C80568156ADFD04FF8180565C5C82818156805681CFFFFFFF%8080565C5C82818156805681FD05FFCFCDA6CDA5CFA7805C805CCFFF3584%FD07FF350C0CFD04FF840C0C0CFFFF84060C84FFFFFF0C0C35FD04FFAF0C%0C35FD04FF5A0C0C060D0C0C0C84FD04FF5A0C0C0D0635FFFFAE8056805C%8056805C80565CA6FD05FF82805C8056805C805CADFD06FF81805C805680%5C805CADFD07FFA7CDA5CDA5CF5C5C565C81FF355AFD07FF84355AA8FFFF%FFAF60355984FF845935A9FFFFA85A3584FD04FFA85A3584FD05FFA83535%0C3559AFFD06FF5A352F5984FFFFFF828281A682A681A682A681AEFD06FF%A7A681815C8182CFFD08FFA7AC81815C8282CFFD09FFCDCDA6CDCDAC5C81%5C80CFFF35FD73FFCFA5CDA5CDA68056805682FF5A84FD73FFCFA5CDA5CD%81805C805CCFA984FD74FFCEA5CDA5CD5C5C568081FF7EAFFD74FFCEA5CD%CDAC5C815C80A6FFA9FD75FFCEA5CDA68156805680A8FD2FFFA8FFFFA8A8%FFA8FFFFFFA8A8A8FFA8A8A8FFFFFFA8FFA8FFFFFFA8A8A8FFA8A8A8FFFF%FFA8FFA8A8FFFFA8A8A8FFA8A8A8FFFFFFA8FFA8FFA8FFA8A8FD0CFFCEA5%CDA6815C805C81CFFD31FFA8FD05FFA8FFFFFFA8FFFFFFA8FD05FFA8FFA8%FD07FFA8FD05FFA8FFFFFFA8FD07FFA8FD07FFA8FD0DFFCEA5CDA5805680%5681FD18FFA7FD15FFA8FFA8FFA8A8A8FFA8FD05FFA8FFFFA8A8FFA8A8A8%FFFFA8A8FFFFFFA8FFFFFFA8FFA8A8A8FFFFFFA8FFA8FFFFFFA8FFFFFFA8%FFA8FFA8FFFFFFA8FD0DFFCFCDCDA5815C805CACFD15FFCFCEFD19FFA8FF%A8FFFFFFA8FFA8FFFFFFA8FFA8FD07FFA8FD05FFA8FFA8FD05FFA8FFA8FF%FFFFA8FD05FFA8FFA8FFFFFFA8FFA8FD10FFA6CDA58056805681CECFFD0F%FFCFA7CDCEFD1DFFA8FFFFFFA8FD05FFA8FD0FFFA8FD13FFA8FFA8FFFFFF%A8FD12FFCFCEA5805C8056A5C8CEA7CFCFFD07FFCFCFC9CDA5CECFFD67FF%CFA68056805681A5CDA5CDA5CDA6CDA6CDA5CDA5CCA6CFFD6BFFCFA65C80%5C81A5CDC8CDA5CDA5CDA5CDCDCFCFFD6FFFAD5680568081CEC9CEA6CECE%CFCFFD73FFCF81805C8081CFFD7BFFA781565C5682A8FD7BFFAE81805C80%81CFFD7BFFA8AC805C568182AEAEFD7AFFAEAD81815C8181ADA7CFAEFD7A%FFA8ADA7ADA7AEA8FD54FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Line Plugin Group) (Line artwork) (Adobe Illustrator.app)%AI8_PluginGroupInfo(Adobe Sketch Plugin Group) (Sketch artwork) (Adobe Illustrator.app)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Blue Sky)(Blue Sky) 0 2 Bd[0.59194300.14807400.2392160.8705880.9294124 %_Br[0.591943 0 0.148074 0 0.239216 0.870588 0.929412 2 50 100 %_BS%_0.591943 0 0.148074 0 0.239216 0.870588 0.929412 2 50 100 Bs0.591943 0 0.148074 0 0.239216 0.870588 0.929412 2 50 0 %_BS%_0.591943 0 0.148074 0 0.239216 0.870588 0.929412 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Gold Dust)(Gold Dust) 0 4 Bd[<212021212221222123222223232424242425242425252525262626262727262727282829292A29292A2A2A2A2B2A2B2B2B2B2B2C2B2C2C2D2D2D2E2D2E2E2F2F30303030303131313132323232323232333333333434><2E2F2F313233343637393B3C3D3E4041434445464748494B4C4D4E4F50525354555658595B5C5D5E5F616165656768696B6B6D6E7070727374767778797A7C7D7E8081828384868687888A8B8D8E8F90919394959698><F4F4F4F4F5F5F6F6F6F6F6F6F6F6F6F7F8F9F9F9FAFAFAFAFAFAFAFBFBFBFCFCFCFCFDFDFDFDFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF><030404040404050506060606060707070708080808080808090909090A0A0A0A0A0B0B0C0C0D0D0D0D0D0E0E0E0E0F0F0F0F0F100F101011111111111211121213131414141515161616161717171717181819191919><E5E5E4E4E3E3E2E2E1E1E1E0E0DFDFDEDEDDDDDDDCDCDBDBDADAD9D9D8D8D8D7D7D6D6D5D5D4D4D4D3D3D2D2D1D1D0D0D0CFCFCECECDCDCCCCCCCBCBCACAC9C9C8C8C7C7C7C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBF><C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F>04 %_Br<171718181818181818181919191A1A1A1A1B1B1B1B1B1C1C1D1D1D1D1D1D1D1E1E1F1F20202021><6A686665646261605E5D5B5A5857555352504F4D4B4A4846454341403E3C3A3837353332302F2E><FBFAFAFAFAF9F9F9F9F9FAFAFAFAF9F9F9F8F8F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F4F4F4F4F4><030303030303030303030303030304040404040404040404040404040404040404040404040403>0.898039<9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5><030303030303030202020202020202020202020101010101010101010101010100000000000000>4 %_Br<00000000000000000000000000000000000000000000000000000000000000000000000102040406060808090A0C0E0E0F0F1112131414151517><A5A5A5A4A4A3A3A3A3A2A2A0A09F9E9E9D9B9B9A99989796959594939191908F8E8D8B8B8A878685838281817F7D7C7A7978767472706F6D6B6A><F0F0F0F1F1F1F1F1F1F1F1F2F2F3F3F2F3F3F4F4F4F5F5F5F6F6F6F7F7F8F8F9F9FAFAFAFAFAFAFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFBFBFBFB><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010102020203><FFFFFFFEFEFEFEFDFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0EFEFEEEEEDEDECEBEBEAEAE9E9E8E7E7E6E6E5><73737374747575767677777878797A7A7B7C7C7D7E7E7F808181828384848586878889898A8B8C8D8E8F90909192939495969798999A9B9C9D9E><00000000000000000000000000000001010101010101010101010101010101010101020202020202020202020202020202020303030303030303>4 %_Br[0.202243 0.596124 1 0.099397 0.74902 0.435294 0 2 50 99.4382 %_BS%_0.202243 0.596124 1 0.099397 0.74902 0.435294 0 2 50 99.4382 Bs0.128298 0.178531 0.955413 0.01355 0.898039 0.772549 0 2 50 86.5168 %_BS%_0.128298 0.178531 0.955413 0.01355 0.898039 0.772549 0 2 50 86.5168 Bs0.089448 0.414069 0.982788 0.010407 0.898039 0.619608 0.011765 2 50 55.211 %_BS%_0.089448 0.414069 0.982788 0.010407 0.898039 0.619608 0.011765 2 50 55.211 Bs0 0.647242 0.942657 0 1 0.45098 0 2 59.5506 0 %_BS%_0 0.647242 0.942657 0 1 0.45098 0 2 59.5506 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (White, Black)(White, Black) 0 2 Bd[<0000010304050608090B0C0E0F1011121314151718191A1B1C1D2021222324252728292A2B2C2D2E2F3031323435363738393A3B3C3D3E3F4041424344454647494A4A4B4C4D4E4F4F505152535455565758585A5B5C5D5D5E5F606061626263646566666768696A6A6B6C6E6F70707172737474757677787879797A7B7C7D7D7E7F8081818283838485858686878788898A8A8B8B8C8D8D8E8F8F909091929293949495959696979899999A9A9B9C9D9D9E9E9F9FA0A1A2A2A3A4A4A5A6A7A8A8A9AAAAABABACADADAEAFB0B0B0B1B2B3B4B4B5B6B6B7B8B9B9BABBBCBDBEBEBEBFC0C1C2C2C3C4C5C6C7C8C8C9CACCCED0D1D2D3D5D6D8DADCDEE0E2E4E7E8><00000102030405050708090A0A0B0C0D0D0E0F1011121213141516171819191A1B1B1C1D1E1F20202122232425262828292A2B2C2C2D2E2E2F303031323334353637373839393A3B3C3C3D3E3E3F4041414243444546474748494A4A4B4C4D4D4E4E4F4F505152525354545657575859595A5B5B5C5C5D5D5E5F5F60616162626364656666676869696A6A6B6B6C6D6E6E6F6F7070717272737474757676777879797A7B7C7D7D7E7E7F80818182828384858686878888898A8B8B8C8C8D8E8F8F90909192939494959697979898999A9A9B9C9D9D9E9F9FA0A1A2A3A3A4A5A6A6A7A7A8A9AAABACADAEAFB0B0B1B2B4B5B6B8B8B9BABBBDBEC0C1C3C4C6C7C9><000001020304050608090A0B0C0D0E0F10111212131415161717191A1B1C1C1D1E1F2021212223242425262728292A2B2C2D2E2E2F2F3031323333343536373838393A3B3B3C3D3D3E3F40404142424344444546464748494A4A4B4C4D4D4E4E4F4F5051515253535454555657575859595A5B5B5C5C5D5D5E5F5F606161626263636465666667676869696A6A6B6B6C6D6E6E6F6F7070717272737474757576777778787879797A7A7B7C7D7D7E7E7F8080818181828283838485858687878888898A8A8B8B8C8D8D8E8E8F8F8F8F909091919293939494959596969798989999999A9A9A9B9B9B9C9C9C9C9D9D9D9D9D9D9D9D9D9D9D9D9E9E9E9E9E9E9E9E><0000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101020202020202030303040404050506060707070808080909090A0A0A0B0B0C0C0D0D0E0F0F1011121213131414151616171819191A1B1B1C1D1D1E1F202122232425262728292A2B2C2D2E2E2F3031323435363738393A3B3D3E3F40414344454647494A4B4C4E4F505253555658595B5C5E5F6162646567686A6B6D6F7072737577787A7B7D7F8082848688898B8D8F91939496989A9C9E9FA1A3A5A6A7A8AAACAEB0B2B3B5B7B9BBBDBFC1C3C5C7C9CACBCCCED0D1D3D5D7D9DADCDEDFE1E2E4E5E7E8E8E9EAEBEDEEF0F1F3F4F5F7F8><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 100 %_BS%_0.911711 0.786862 0.619532 0.974487 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Jive)(Jive) 47.5615 109.6396 155.9004 219.2813 [%AI3_Tile(0 O 0 R 1 0.770779 0.225895 0.073884 0 0.258824 0.494118 Xa 1 0.770779 0.225895 0.073884 0 0.258824 0.494118 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR135.0352 74.9453 m135.0566 75.0645 135.1602 75.1504 135.2813 75.1523 c148.1875 75.2871 160.0352 78.4199 169.2529 86.667 C161.2227 81.1094 146.3105 79.1563 137.7256 83.0488 c137.6152 83.0986 137.5566 83.2188 137.584 83.3369 c137.6104 83.4551 137.7168 83.5371 137.8379 83.5332 c148.5176 83.2441 157.1172 86.54 163.8223 92.498 C156.9531 92.9199 151.248 97.2383 151.2656 102.3428 c151.2656 102.4619 151.3496 102.5645 151.4668 102.5898 c151.583 102.6152 151.7012 102.5547 151.75 102.4463 c152.8711 99.957 156.498 98.666 160.333 99.5664 c164.5127 100.5469 167.333 103.7559 166.6338 106.7314 c166.1621 108.7461 164.1973 110.1348 161.6816 110.5186 c161.5547 110.5371 161.4619 110.6484 161.4648 110.7764 c161.4688 110.9043 161.5674 111.0098 161.6953 111.0215 c162.7637 111.124 163.875 111.1279 165.0127 111.0195 c171.5029 110.4023 176.5264 106.4238 176.9619 101.8418 C181.6748 102.3887 185.8467 104.998 187.3408 108.6152 c187.3857 108.7236 187.501 108.7871 187.6162 108.7695 c187.7314 108.75 187.8193 108.6553 187.8291 108.5391 c188.2061 103.7871 186.5713 100.7002 182.8584 97.6846 C188.2432 99.7441 194.3027 99.8496 200.1133 97.1465 c200.2188 97.0977 200.2773 96.9824 200.2559 96.8672 c200.2324 96.752 200.1328 96.668 200.0156 96.6641 c195.1367 96.4736 191.5996 94.9082 188.2861 91.5918 C206.5391 96.7256 221.3711 85.3906 216.2383 68.5391 c216.2031 68.4238 216.0918 68.3486 215.9707 68.3613 c215.8496 68.373 215.7539 68.4688 215.7441 68.5898 c214.8262 78.3037 208.041 84.7051 197.8828 85.666 C203.2695 83.6055 208.8828 78.6895 209.4395 70.1318 c209.4473 70.0098 209.3672 69.8984 209.248 69.8691 c209.1289 69.8398 209.0059 69.8984 208.9551 70.0098 c206.1563 76.1641 200.6582 79.2754 194.7949 79.8223 C201.1289 77.2422 205.1914 71.2207 206.3652 63.4023 c206.3848 63.2793 206.3105 63.1602 206.1914 63.123 c206.0742 63.084 205.9453 63.1387 205.8887 63.248 c202.0234 70.8311 193.7324 76.042 183.4424 72.0605 c172.8252 67.9512 168.168 55.6738 167.1387 47.0195 c167.124 46.8984 167.0234 46.8047 166.9004 46.7969 c166.7783 46.7891 166.668 46.8711 166.6396 46.9922 c162.9199 62.6797 170.2227 78.9414 183.2764 85.832 C176.1807 83.8291 169.8369 79.5723 166.249 72.4775 C157.9551 71.459 152.2451 68.6152 149.3916 63.2383 c149.335 63.1309 149.2109 63.0781 149.0957 63.1133 c148.9805 63.1465 148.9043 63.2578 148.9141 63.3789 c149.0967 65.4883 149.8555 69.709 152.9883 71.6494 C146.0234 71.6387 140.4824 72.543 135.1895 74.6621 c135.0781 74.708 135.0127 74.8262 135.0352 74.9453 cf164.5215 21.4746 m164.4229 21.541 164.293 21.5293 164.2061 21.4492 c164.1201 21.3672 164.1016 21.2383 164.1602 21.1367 c165.7803 18.3398 164.3008 14.3223 161.1094 14.3223 c155.3887 14.3223 152.6387 25.0918 153.5137 34.916 C155.6768 29.1602 157.5469 26.8613 160.8613 24.1211 c160.9551 24.043 161.0898 24.043 161.1836 24.1191 c161.2773 24.1973 161.3047 24.3281 161.2471 24.4355 c156.3906 33.5156 155.3496 40.502 155.3496 48.5215 C156.8125 42.5625 158.5449 39.1992 163.4766 34.1406 c163.5625 34.0527 163.6992 34.0391 163.8018 34.1074 c163.9033 34.1777 163.9404 34.3105 163.8887 34.4238 c158.5908 46.0137 158.9951 58.8711 162.9414 68.6875 c162.9805 68.7852 162.9561 68.8965 162.8789 68.9688 c162.8018 69.0391 162.6895 69.0566 162.5938 69.0098 c157.3887 66.459 154.3301 64.7832 149.8418 58.6211 C151.1992 51.2227 150.0703 47.5723 146.6699 41.4258 C150.6074 51.3438 148.5117 65.3203 138.4824 71.0176 c138.373 71.0791 138.2344 71.0518 138.1582 70.9531 c138.0801 70.8535 138.0869 70.7119 138.1738 70.6211 c141.9551 66.666 144.7051 59.9863 142.3301 52.6934 C143.8594 63.082 134.7344 71.8086 124.5508 71.8086 c114.9512 71.8086 108.4004 64.2988 108.9414 56.8672 c109.4785 49.502 114.3848 45.8984 118.6133 44.3691 c118.7246 44.3301 118.8496 44.3711 118.9131 44.4707 c118.9766 44.5723 118.9629 44.7012 118.8799 44.7871 c113.2695 50.4785 112.502 61.2793 122.4629 64.5469 C116.6035 59.4902 118.7734 47.7168 128.1523 46.8223 c128.2695 46.8105 128.3789 46.8809 128.417 46.9922 c128.4551 47.1035 128.4121 47.2266 128.3135 47.2891 c126.3047 48.5664 124.6348 51.0605 124.6348 53.8633 c124.6348 58.5371 128.0566 60.373 130.3105 60.373 c133.7324 60.373 136.5703 57.1172 136.5703 52.1934 c136.5703 46.3496 131.3105 41.5098 124.5508 40.7578 c117.9248 40.0234 111.7686 42.9121 108.8008 47.2168 c108.7314 47.3184 108.5996 47.3555 108.4873 47.3047 c108.375 47.2539 108.3164 47.1289 108.3467 47.0098 c111.3652 35.3066 125.1426 30.1328 135.2344 37.5039 C128.6211 30.002 118.2285 29.8984 109.5127 37.5898 c109.4219 37.6699 109.2871 37.6738 109.1904 37.5996 c109.0938 37.5273 109.0635 37.3945 109.1172 37.2871 c111.7842 31.8789 118.3701 25.4668 127.7227 26.4023 c136.2793 27.2578 141.2441 35.416 142.2461 42.0938 C142.8027 33.5723 140.8525 27.5566 133.4922 21.9473 c133.3955 21.873 133.3652 21.7402 133.4199 21.6309 c133.4746 21.5234 133.5996 21.4688 133.7168 21.502 c140.502 23.4629 145.9473 26.9277 148.7656 34.0469 C148.7656 27.8848 146.627 21.6738 141.2402 17.5352 c141.1426 17.4609 141.1133 17.3301 141.168 17.2207 c141.2227 17.1113 141.3467 17.0566 141.4639 17.0898 c144.917 18.0742 147.6348 19.5781 149.6016 22.2754 C150.9121 11.1758 156.123 4.58398 162.127 4.58398 c166.252 4.58398 169.332 7.61719 169.332 12.4551 c169.332 15.2852 167.8438 19.2578 164.5215 21.4746 cf263.748 113.0938 m260.5859 116.998 254.209 118.4863 247.3164 117.082 C247.8262 121.3828 246.9824 125.873 245.7051 128.5664 c245.6523 128.6758 245.5313 128.7334 245.4141 128.7051 c245.2969 128.6758 245.2168 128.5684 245.2207 128.4473 c245.5957 119.6807 240.5977 112.6035 231.7715 109.5371 C238.6777 114.293 240.6973 123.7305 237.4102 128.6035 c237.3418 128.7021 237.2148 128.7412 237.1035 128.6953 c236.9922 128.6504 236.9277 128.5332 236.9492 128.416 c237.3223 126.3555 236.3438 123.7314 234.2363 121.6895 c231.3301 118.875 227.3867 118.2363 225.4258 120.2598 c223.4648 122.2852 224.2285 126.207 227.1328 129.0215 c228.1934 130.0488 229.3926 130.7832 230.582 131.2061 c230.6953 131.2461 230.7637 131.3594 230.748 131.4775 c230.7344 131.5967 230.6387 131.6885 230.5195 131.6982 c224.1309 132.2529 219.75 128.4463 217.0039 123.8203 c214.209 119.1152 209.4336 115.4102 203.793 116.1504 c203.6738 116.166 203.5605 116.0957 203.5195 115.9824 c203.4805 115.8691 203.5254 115.7422 203.6289 115.6807 c206.4258 113.9961 209.5 113.2969 213.4922 114.6289 C207.6973 109.7197 199.4453 106.8867 191.6523 109.4014 c191.543 109.4375 191.4238 109.3945 191.3613 109.2979 c191.2988 109.2012 191.3105 109.0752 191.3867 108.9902 c197.2949 102.4258 209.0762 102.2949 216.4961 107.6172 C213.459 103.3008 209.4277 100.1328 202.2031 99.1387 c202.0879 99.123 201.998 99.0313 201.9844 98.916 c201.9727 98.7998 202.0391 98.6904 202.1484 98.6504 c210.4395 95.5723 218.748 98.6953 225.5938 106.8652 C222.6016 100.4883 217.6875 95.3809 210.8262 92.8535 c210.7109 92.8115 210.6426 92.6934 210.6641 92.5742 c210.6836 92.4531 210.7871 92.3643 210.9082 92.3613 c214.8516 92.2803 218.3945 93.2188 223.1738 95.9316 C219.666 90.2422 220.4336 80.293 225.543 73.6738 c225.6133 73.582 225.7383 73.5498 225.8457 73.5957 c225.9512 73.6426 226.0137 73.7549 225.9941 73.8691 c224.8145 81.0703 227.293 89.1992 231.6035 93.5117 C229.4512 85.8799 231.5977 78.9355 237.5 73.8672 c237.5703 73.8066 237.6699 73.79 237.7559 73.8232 c237.8438 73.8564 237.9043 73.9355 237.918 74.0273 c239.1523 83.4453 249.6875 93.002 258.5195 93.8027 c258.6445 93.8135 258.7422 93.9141 258.75 94.0381 c258.7578 94.1621 258.6758 94.2754 258.5527 94.3027 c254.2734 95.2715 249.8613 94.793 246.1641 93.2715 C248.8242 96.2051 252.1035 98.3828 255.7188 99.5176 c255.8359 99.5537 255.9082 99.668 255.8945 99.7891 c255.8809 99.9102 255.7813 100.0039 255.6602 100.0127 c251.1504 100.3242 246.7363 99.0068 242.9297 96.4746 C247.291 103.0957 253.9102 108.0195 262.3574 109.9805 c262.4785 110.0088 262.5605 110.1191 262.5547 110.2432 c262.5469 110.3672 262.4512 110.4668 262.3281 110.4805 c250.4102 111.7822 240.582 107.1621 234.1074 98.5625 C235.7559 103.4629 240.4727 108.3184 247.0527 111.1816 c252.8984 113.7266 258.9023 114.1279 263.4746 112.6914 c263.5801 112.6582 263.6973 112.6982 263.7598 112.791 c263.8223 112.8828 263.8184 113.0059 263.748 113.0938 cf210.8438 37.5215 m215.6504 48.0078 215.3086 56.207 211.4375 66.5762 c211.3926 66.6934 211.2715 66.7607 211.1484 66.7363 c211.0254 66.7109 210.9395 66.5996 210.9453 66.4746 c211.5664 53.8535 208.1191 44.8203 200.6465 38.668 C208.8965 48.5195 205 68.2275 191.8242 68.2275 c182.2393 68.2275 174.3086 60.252 172.3691 50.7031 c172.3447 50.582 172.4111 50.459 172.5273 50.416 c172.6426 50.3711 172.7734 50.416 172.8359 50.5215 c175.6787 55.2832 180.2451 58.373 185.2939 58.373 c193.4277 58.373 195.834 51.9063 195.834 47.375 c195.834 41.1875 190.9082 36.0313 187.1279 36.0313 c183.6904 36.0313 182.0869 38.8555 182.0869 40.959 c182.0869 44.8574 185.085 48.125 188.4639 49.123 c188.583 49.1582 188.6611 49.2773 188.6436 49.4023 c188.624 49.5273 188.5186 49.6191 188.3936 49.6211 c184.2861 49.6465 180.8154 47.7656 178.7627 44.0527 C178.4932 46.9277 178.4902 48.7383 179.4033 51.7754 c179.4385 51.8926 179.3848 52.0176 179.2773 52.0742 c179.168 52.1309 179.0352 52.1016 178.9609 52.0059 c171.6045 42.6133 175.125 26.3809 180.9404 19.6484 C175.4082 23.6309 170.5234 32.2813 170.6006 44.041 c170.6016 44.1641 170.5156 44.2676 170.3955 44.291 c170.2754 44.3164 170.1563 44.25 170.1113 44.1367 c166.0029 33.8848 168.1826 14.8887 179.3926 4.28516 C176.5088 3.88867 173.5254 3.93945 170.2676 4.97852 c170.1523 5.01367 170.0273 4.96484 169.9688 4.85938 c169.9102 4.75195 169.9336 4.61914 170.0273 4.54102 c174.1191 1.08594 179.8418 0 185.2939 0 C180.5967 5.5 182.1572 16.5547 189.6494 16.5547 c194.9961 16.5547 197.4238 8.25586 193.2949 3.77344 c193.2168 3.6875 193.207 3.55859 193.2695 3.46289 c193.334 3.36523 193.4551 3.32227 193.5664 3.36133 c198.3457 5.01563 203.5117 9.15039 203.5117 14.377 c203.5117 19.4199 198.6992 23.7715 191.7109 23.4277 C200.5293 25.9336 209.7617 23.1602 214.5918 17.1758 c214.666 17.082 214.7969 17.0547 214.9023 17.1074 c215.0098 17.1621 215.0645 17.2832 215.0352 17.3984 c212.2441 28.1152 203.0684 32.5977 191.5957 31.1055 C200.877 34.8613 214.8457 31.5859 221.0195 23.7949 c221.0918 23.7031 221.2188 23.6738 221.3262 23.7227 c221.4316 23.7734 221.4902 23.8906 221.4668 24.0039 c220.0957 30.6191 216.6035 35.5664 210.8438 37.5215 Cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.411383 0 0.01117 0 0.615686 0.862745 0.976471 Xa 0.411383 0 0.01117 0 0.615686 0.862745 0.976471 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR237.2266 56.8086 m237.2051 56.6895 237.1016 56.6016 236.9805 56.6016 c224.0742 56.4648 212.2266 53.334 203.0098 45.0859 C211.0391 50.6445 225.9512 52.5957 234.5371 48.7051 c234.6465 48.6543 234.7051 48.5332 234.6777 48.416 c234.6523 48.2988 234.5449 48.2168 234.4238 48.2188 c223.7441 48.5098 215.1445 45.2129 208.4395 39.2559 C215.3086 38.832 221.0137 34.5156 220.9961 29.4102 c220.9961 29.291 220.9121 29.1875 220.7949 29.1621 c220.6797 29.1387 220.5605 29.1973 220.5117 29.3066 c219.3906 31.7949 215.7637 33.0879 211.9297 32.1875 c207.75 31.2051 204.9297 27.998 205.6289 25.0215 c206.0996 23.0078 208.0645 21.6191 210.5801 21.2344 c210.707 21.2148 210.8008 21.1055 210.7969 20.9766 c210.793 20.8496 210.6953 20.7441 210.5664 20.7305 c209.498 20.6289 208.3867 20.625 207.25 20.7344 c200.7598 21.3516 195.7363 25.3281 195.3008 29.9121 C190.5889 29.3652 186.417 26.7539 184.9229 23.1387 c184.8779 23.0293 184.7646 22.9668 184.6475 22.9844 c184.5322 23.002 184.4443 23.0977 184.4346 23.2148 c184.0576 27.9648 185.6924 31.0527 189.4053 34.0684 C184.0205 32.0098 177.959 31.9043 172.1484 34.6055 c172.043 34.6563 171.9844 34.7715 172.0059 34.8867 c172.0293 35.002 172.1289 35.0859 172.2461 35.0898 c177.125 35.2793 180.6631 36.8457 183.9795 40.1621 C165.7227 35.0273 150.8906 46.3633 156.0234 63.2129 c156.0586 63.3301 156.1699 63.4043 156.291 63.3926 c156.4121 63.3809 156.5078 63.2852 156.5176 63.1641 c157.4355 53.4492 164.2207 47.0469 174.3789 46.0879 C168.9922 48.1465 163.3789 53.0625 162.8223 61.6211 c162.8145 61.7441 162.8945 61.8535 163.0137 61.8848 c163.1328 61.9141 163.2559 61.8535 163.3066 61.7422 c166.1055 55.5879 171.6035 52.4785 177.4668 51.9297 C171.1328 54.5117 167.0703 60.5332 165.8965 68.3516 c165.877 68.4746 165.9512 68.5918 166.0703 68.6309 c166.1875 68.668 166.3164 68.6152 166.373 68.5039 c170.2383 60.9219 178.5293 55.7109 188.8213 59.6934 c199.4375 63.8027 204.0938 76.0781 205.123 84.7324 c205.1387 84.8555 205.2383 84.9492 205.3613 84.957 c205.4844 84.9629 205.5938 84.8809 205.623 84.7617 c209.3418 69.0723 202.0391 52.8125 188.9873 45.9219 C196.082 47.9238 202.4258 52.1816 206.0137 59.2754 C214.3066 60.293 220.0176 63.1387 222.8711 68.5156 c222.9277 68.6211 223.0508 68.6738 223.166 68.6406 c223.2813 68.6055 223.3574 68.4941 223.3477 68.375 c223.166 66.2656 222.4063 62.0449 219.2734 60.1035 C226.2383 60.1152 231.7793 59.2109 237.0723 57.0898 c237.1836 57.0449 237.25 56.9277 237.2266 56.8086 cf207.7402 110.2773 m207.8398 110.2129 207.9688 110.2227 208.0566 110.3047 c208.1426 110.3848 208.1602 110.5137 208.1016 110.6172 c206.4824 113.4141 207.9609 117.4297 211.1523 117.4297 c216.873 117.4297 219.623 106.6602 218.748 96.8379 C216.5859 102.5918 214.7148 104.8926 211.4004 107.6328 c211.3066 107.709 211.1719 107.7109 211.0781 107.6328 c210.9844 107.5566 210.957 107.4238 211.0156 107.3164 c215.8711 98.2383 216.9121 91.252 216.9121 83.2324 C215.4492 89.1895 213.7168 92.5527 208.7852 97.6133 c208.6992 97.7012 208.5625 97.7148 208.4609 97.6445 c208.3594 97.5742 208.3223 97.4414 208.373 97.3301 c213.6719 85.7383 213.2676 72.8828 209.3203 63.0664 c209.2813 62.9688 209.3066 62.8574 209.3828 62.7852 c209.4609 62.7129 209.5723 62.6973 209.668 62.7422 c214.873 65.293 217.9316 66.9688 222.4199 73.1328 C221.0625 80.5313 222.1914 84.1797 225.5918 90.3262 C221.6543 80.4102 223.75 66.4336 233.7793 60.7363 c233.8887 60.6738 234.0273 60.7012 234.1035 60.8008 c234.1816 60.9004 234.1758 61.041 234.0879 61.1328 c230.3066 65.0879 227.5566 71.7676 229.9316 79.0586 C228.4023 68.6699 237.5273 59.9453 247.7109 59.9453 c257.3105 59.9453 263.8613 67.4531 263.3203 74.8848 c262.7832 82.25 257.877 85.8555 253.6484 87.3828 c253.5371 87.4238 253.4121 87.3809 253.3496 87.2813 c253.2852 87.1816 253.2988 87.0508 253.3828 86.9668 c258.9922 81.2734 259.7598 70.4746 249.7988 67.207 C255.6582 72.2637 253.4883 84.0352 244.1094 84.9316 c243.9922 84.9414 243.8828 84.8711 243.8457 84.7598 c243.8066 84.6504 243.8496 84.5273 243.9492 84.4648 c245.957 83.1855 247.627 80.6934 247.627 77.8906 c247.627 73.2168 244.2051 71.3789 241.9512 71.3789 c238.5293 71.3789 235.6914 74.6348 235.6914 79.5605 c235.6914 85.4023 240.9512 90.2441 247.7109 90.9941 c254.3379 91.7305 260.4941 88.8398 263.4609 84.5352 c263.5313 84.4336 263.6621 84.3984 263.7754 84.4492 c263.8867 84.5 263.9453 84.623 263.916 84.7422 c260.8965 96.4453 247.1191 101.6191 237.0273 94.25 C243.6406 101.75 254.0332 101.8555 262.75 94.1641 c262.8398 94.084 262.9746 94.0781 263.0723 94.1523 c263.168 94.2266 263.1992 94.3574 263.1445 94.4668 c260.4785 99.873 253.8926 106.2852 244.5391 105.3516 c235.9824 104.4961 231.0176 96.3359 230.0156 89.6602 C229.459 98.1816 231.4102 104.1953 238.7695 109.8047 c238.8672 109.8789 238.8965 110.0117 238.8418 110.1211 c238.7871 110.2305 238.6621 110.2852 238.5449 110.25 c231.7598 108.291 226.3145 104.8262 223.4961 97.707 C223.4961 103.8672 225.6348 110.0781 231.0215 114.2168 c231.1191 114.291 231.1484 114.4238 231.0938 114.5332 c231.0391 114.6406 230.916 114.6953 230.7988 114.6621 c227.3457 113.6797 224.627 112.1738 222.6602 109.4785 C221.3496 120.5781 216.1387 127.168 210.1348 127.168 c206.0098 127.168 202.9297 124.1348 202.9297 119.2988 c202.9297 116.4688 204.418 112.4961 207.7402 110.2773 cf108.5137 18.6602 m111.6758 14.7559 118.0527 13.2676 124.9453 14.6719 C124.4355 10.3691 125.2793 5.88086 126.5566 3.18555 c126.6094 3.07813 126.7305 3.01953 126.8477 3.04883 c126.9648 3.07813 127.0449 3.18555 127.041 3.30664 c126.666 12.0723 131.6641 19.1484 140.4902 22.2148 C133.584 17.459 131.5645 8.02148 134.8516 3.15039 c134.9199 3.05078 135.0469 3.01172 135.1582 3.05664 c135.2695 3.10156 135.334 3.21875 135.3125 3.33789 c134.9395 5.39844 135.918 8.02148 138.0254 10.0625 c140.9316 12.877 144.875 13.5156 146.8359 11.4922 c148.7969 9.4668 148.0332 5.54492 145.1289 2.73242 c144.0684 1.70508 142.8691 0.96875 141.6797 0.546875 c141.5664 0.505859 141.498 0.392578 141.5137 0.275391 c141.5273 0.15625 141.623 0.064453 141.7422 0.054688 c148.1309 -0.5 152.5117 3.30664 155.2578 7.93164 c158.0527 12.6367 162.8281 16.3438 168.4688 15.6035 c168.5879 15.5879 168.7012 15.6582 168.7422 15.7715 c168.7813 15.8848 168.7363 16.0098 168.6328 16.0723 c165.8359 17.7559 162.7617 18.4551 158.7695 17.125 C164.5645 22.0332 172.8164 24.8652 180.6104 22.3516 c180.7197 22.3164 180.8389 22.3594 180.9014 22.4551 c180.9639 22.5508 180.9541 22.6777 180.876 22.7637 c174.9668 29.3281 163.1855 29.459 155.7656 24.1348 C158.8027 28.4512 162.834 31.6211 170.0586 32.6133 c170.1738 32.6289 170.2637 32.7227 170.2773 32.8379 c170.2891 32.9531 170.2227 33.0625 170.1133 33.1035 c161.8223 36.1797 153.5137 33.0586 146.668 24.8867 C149.6602 31.2656 154.5742 36.373 161.4355 38.9004 c161.5508 38.9414 161.6191 39.0586 161.5977 39.1797 c161.5781 39.3008 161.4746 39.3887 161.3535 39.3906 c157.4102 39.4727 153.8672 38.5332 149.0879 35.8203 C152.5957 41.5117 151.8281 51.459 146.7188 58.0801 c146.6484 58.1719 146.5234 58.2031 146.416 58.1582 c146.3105 58.1113 146.248 57.998 146.2676 57.8828 c147.4473 50.6836 144.9688 42.5547 140.6582 38.2422 C142.8105 45.873 140.6641 52.8184 134.7617 57.8848 c134.6914 57.9453 134.5918 57.9629 134.5059 57.9297 c134.418 57.8965 134.3574 57.8184 134.3438 57.7266 c133.1094 48.3086 122.5742 38.752 113.7422 37.9512 c113.6172 37.9395 113.5195 37.8398 113.5117 37.7148 c113.5039 37.5898 113.5859 37.4785 113.709 37.4512 c117.9883 36.4824 122.4004 36.9609 126.0977 38.4805 C123.4375 35.5488 120.1582 33.3711 116.543 32.2363 c116.4258 32.1992 116.3535 32.0859 116.3672 31.9648 c116.3809 31.8438 116.4805 31.748 116.6016 31.7402 c121.1113 31.4297 125.5254 32.7461 129.332 35.2793 C124.9707 28.6582 118.3516 23.7344 109.9043 21.7715 c109.7832 21.7441 109.7012 21.6328 109.707 21.5098 c109.7148 21.3867 109.8105 21.2871 109.9336 21.2734 c121.8516 19.9707 131.6797 24.5918 138.1543 33.1914 C136.5059 28.2891 131.7891 23.4355 125.209 20.5723 c119.3633 18.0273 113.3594 17.625 108.7871 19.0625 c108.6816 19.0957 108.5645 19.0547 108.502 18.9629 c108.4395 18.8691 108.4434 18.7461 108.5137 18.6602 cf161.418 94.2324 m156.6113 83.7461 156.9531 75.5469 160.8242 65.1777 c160.8691 65.0605 160.9902 64.9922 161.1133 65.0176 c161.2363 65.043 161.3223 65.1543 161.3164 65.2773 c160.6953 77.9004 164.1426 86.9316 171.6152 93.0859 C163.3652 83.2324 167.2617 63.5254 180.4385 63.5254 c190.0244 63.5254 197.9531 71.502 199.8926 81.0508 c199.918 81.1719 199.8516 81.293 199.7344 81.3379 c199.6191 81.3828 199.4883 81.3379 199.4258 81.2305 c196.584 76.4688 192.0176 73.3789 186.9697 73.3789 c178.834 73.3789 176.4277 79.8457 176.4277 84.3789 c176.4277 90.5645 181.3545 95.7207 185.1357 95.7207 c188.5732 95.7207 190.1768 92.8984 190.1768 90.7949 c190.1768 86.8965 187.1787 83.6289 183.8018 82.6309 c183.6807 82.5938 183.6045 82.4766 183.6221 82.3516 c183.6396 82.2266 183.7451 82.1328 183.8721 82.1328 c187.9775 82.1074 191.4473 83.9863 193.5 87.7012 C193.7695 84.8262 193.7715 83.0156 192.8594 79.9766 c192.8242 79.8594 192.877 79.7344 192.9844 79.6777 c193.0938 79.623 193.2266 79.6504 193.3008 79.748 c200.6582 89.1406 197.1367 105.3711 191.3223 112.1055 C196.8535 108.123 201.7383 99.4707 201.6621 87.7109 c201.6602 87.5898 201.7461 87.4844 201.8672 87.4609 c201.9863 87.4375 202.1055 87.502 202.1504 87.6152 c206.2598 97.8691 204.0801 116.8633 192.8691 127.4668 C195.7539 127.8652 198.7363 127.8145 201.9941 126.7754 c202.1094 126.7383 202.2344 126.7891 202.293 126.8945 c202.3516 127 202.3281 127.1328 202.2344 127.2109 c198.1426 130.666 192.4199 131.752 186.9697 131.752 C191.666 126.252 190.1064 115.1992 182.6162 115.1992 c177.2656 115.1992 174.8379 123.498 178.9668 127.9805 c179.0449 128.0664 179.0547 128.1934 178.9922 128.291 c178.9277 128.3887 178.8066 128.4297 178.6953 128.3926 c173.916 126.7363 168.75 122.6035 168.75 117.375 c168.75 112.334 173.5625 107.9805 180.5537 108.3242 C171.7324 105.8203 162.5 108.5918 157.6699 114.5781 c157.5957 114.6699 157.4648 114.6992 157.3594 114.6445 c157.252 114.5918 157.1973 114.4707 157.2266 114.3535 c160.0176 103.6387 169.1934 99.1543 180.667 100.6484 C171.3848 96.8906 157.416 100.166 151.2422 107.957 c151.1699 108.0488 151.043 108.0801 150.9355 108.0293 c150.8301 107.9805 150.7715 107.8633 150.7949 107.748 c152.166 101.1328 155.6582 96.1875 161.418 94.2324 Cf*U%AI6_EndPatternLayer) &(0 O 0 R 1 0.770779 0.225895 0.073884 0 0.258824 0.494118 Xa 1 0.770779 0.225895 0.073884 0 0.258824 0.494118 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR26.6963 74.9453 m26.7178 75.0645 26.8213 75.1504 26.9424 75.1523 c39.8486 75.2871 51.6963 78.4199 60.9141 86.667 C52.8838 81.1094 37.9717 79.1563 29.3867 83.0488 c29.2764 83.0986 29.2178 83.2188 29.2451 83.3369 c29.2715 83.4551 29.3779 83.5371 29.499 83.5332 c40.1787 83.2441 48.7783 86.54 55.4834 92.498 C48.6143 92.9199 42.9092 97.2383 42.9268 102.3428 c42.9268 102.4619 43.0107 102.5645 43.1279 102.5898 c43.2441 102.6152 43.3623 102.5547 43.4111 102.4463 c44.5322 99.957 48.1592 98.666 51.9941 99.5664 c56.1738 100.5469 58.9941 103.7559 58.2949 106.7314 c57.8232 108.7461 55.8584 110.1348 53.3428 110.5186 c53.2158 110.5371 53.123 110.6484 53.126 110.7764 c53.1299 110.9043 53.2285 111.0098 53.3564 111.0215 c54.4248 111.124 55.5361 111.1279 56.6738 111.0195 c63.1641 110.4023 68.1875 106.4238 68.623 101.8418 C73.3359 102.3887 77.5078 104.998 79.002 108.6152 c79.0469 108.7236 79.1621 108.7871 79.2773 108.7695 c79.3926 108.75 79.4805 108.6553 79.4902 108.5391 c79.8672 103.7871 78.2324 100.7002 74.5195 97.6846 C79.9043 99.7441 85.9648 99.8496 91.7754 97.1465 c91.8809 97.0977 91.9395 96.9824 91.918 96.8672 c91.8945 96.752 91.7949 96.668 91.6777 96.6641 c86.7988 96.4736 83.2617 94.9082 79.9473 91.5918 C98.2012 96.7256 113.0332 85.3906 107.9004 68.5391 c107.8652 68.4238 107.7539 68.3486 107.6328 68.3613 c107.5117 68.373 107.416 68.4688 107.4063 68.5898 c106.4883 78.3037 99.7031 84.7051 89.5449 85.666 C94.9316 83.6055 100.5449 78.6895 101.1016 70.1318 c101.1094 70.0098 101.0293 69.8984 100.9102 69.8691 c100.791 69.8398 100.668 69.8984 100.6172 70.0098 c97.8184 76.1641 92.3203 79.2754 86.457 79.8223 C92.791 77.2422 96.8535 71.2207 98.0273 63.4023 c98.0469 63.2793 97.9727 63.1602 97.8535 63.123 c97.7363 63.084 97.6074 63.1387 97.5508 63.248 c93.6855 70.8311 85.3945 76.042 75.1035 72.0605 c64.4863 67.9512 59.8291 55.6738 58.7998 47.0195 c58.7852 46.8984 58.6846 46.8047 58.5615 46.7969 c58.4395 46.7891 58.3291 46.8711 58.3008 46.9922 c54.5811 62.6797 61.8838 78.9414 74.9375 85.832 C67.8418 83.8291 61.498 79.5723 57.9102 72.4775 C49.6162 71.459 43.9063 68.6152 41.0527 63.2383 c40.9961 63.1309 40.8721 63.0781 40.7568 63.1133 c40.6416 63.1465 40.5654 63.2578 40.5752 63.3789 c40.7578 65.4883 41.5166 69.709 44.6494 71.6494 C37.6846 71.6387 32.1436 72.543 26.8506 74.6621 c26.7393 74.708 26.6738 74.8262 26.6963 74.9453 cf56.1826 21.4746 m56.084 21.541 55.9541 21.5293 55.8672 21.4492 c55.7813 21.3672 55.7627 21.2383 55.8213 21.1367 c57.4414 18.3398 55.9619 14.3223 52.7705 14.3223 c47.0498 14.3223 44.2998 25.0918 45.1748 34.916 C47.3379 29.1602 49.208 26.8613 52.5225 24.1211 c52.6162 24.043 52.751 24.043 52.8447 24.1191 c52.9385 24.1973 52.9658 24.3281 52.9082 24.4355 c48.0518 33.5156 47.0107 40.502 47.0107 48.5215 C48.4736 42.5625 50.2061 39.1992 55.1377 34.1406 c55.2236 34.0527 55.3604 34.0391 55.4629 34.1074 c55.5645 34.1777 55.6016 34.3105 55.5498 34.4238 c50.252 46.0137 50.6563 58.8711 54.6025 68.6875 c54.6416 68.7852 54.6172 68.8965 54.54 68.9688 c54.4629 69.0391 54.3506 69.0566 54.2549 69.0098 c49.0498 66.459 45.9912 64.7832 41.5029 58.6211 C42.8604 51.2227 41.7314 47.5723 38.3311 41.4258 C42.2686 51.3438 40.1729 65.3203 30.1436 71.0176 c30.0342 71.0791 29.8955 71.0518 29.8193 70.9531 c29.7412 70.8535 29.748 70.7119 29.835 70.6211 c33.6162 66.666 36.3662 59.9863 33.9912 52.6934 C35.5205 63.082 26.3955 71.8086 16.2119 71.8086 c6.6123 71.8086 0.061523 64.2988 0.602539 56.8672 c1.13965 49.502 6.0459 45.8984 10.2744 44.3691 c10.3857 44.3301 10.5107 44.3711 10.5742 44.4707 c10.6377 44.5723 10.624 44.7012 10.541 44.7871 c4.93066 50.4785 4.16309 61.2793 14.124 64.5469 C8.26465 59.4902 10.4346 47.7168 19.8135 46.8223 c19.9307 46.8105 20.04 46.8809 20.0781 46.9922 c20.1162 47.1035 20.0732 47.2266 19.9746 47.2891 c17.9658 48.5664 16.2959 51.0605 16.2959 53.8633 c16.2959 58.5371 19.7178 60.373 21.9717 60.373 c25.3936 60.373 28.2314 57.1172 28.2314 52.1934 c28.2314 46.3496 22.9717 41.5098 16.2119 40.7578 c9.58594 40.0234 3.42969 42.9121 0.461914 47.2168 c0.392578 47.3184 0.260742 47.3555 0.148438 47.3047 c0.036133 47.2539 -0.022461 47.1289 0.007813 47.0098 c3.02637 35.3066 16.8037 30.1328 26.8955 37.5039 C20.2822 30.002 9.88965 29.8984 1.17383 37.5898 c1.08301 37.6699 0.948242 37.6738 0.851563 37.5996 c0.754883 37.5273 0.724609 37.3945 0.77832 37.2871 c3.44531 31.8789 10.0313 25.4668 19.3838 26.4023 c27.9404 27.2578 32.9053 35.416 33.9072 42.0938 C34.4639 33.5723 32.5137 27.5566 25.1533 21.9473 c25.0566 21.873 25.0264 21.7402 25.0811 21.6309 c25.1357 21.5234 25.2607 21.4688 25.3779 21.502 c32.1631 23.4629 37.6084 26.9277 40.4268 34.0469 C40.4268 27.8848 38.2881 21.6738 32.9014 17.5352 c32.8037 17.4609 32.7744 17.3301 32.8291 17.2207 c32.8838 17.1113 33.0078 17.0566 33.125 17.0898 c36.5781 18.0742 39.2959 19.5781 41.2627 22.2754 C42.5732 11.1758 47.7842 4.58398 53.7881 4.58398 c57.9131 4.58398 60.9932 7.61719 60.9932 12.4551 c60.9932 15.2852 59.5049 19.2578 56.1826 21.4746 cf155.4102 113.0938 m152.248 116.998 145.8711 118.4863 138.9785 117.082 C139.4883 121.3828 138.6445 125.873 137.3672 128.5664 c137.3145 128.6758 137.1934 128.7334 137.0762 128.7051 c136.959 128.6758 136.8789 128.5684 136.8828 128.4473 c137.2578 119.6807 132.2598 112.6035 123.4336 109.5371 C130.3398 114.293 132.3594 123.7305 129.0723 128.6035 c129.0039 128.7021 128.877 128.7412 128.7656 128.6953 c128.6543 128.6504 128.5898 128.5332 128.6113 128.416 c128.9844 126.3555 128.0059 123.7314 125.8984 121.6895 c122.9922 118.875 119.0488 118.2363 117.0879 120.2598 c115.127 122.2852 115.8906 126.207 118.7949 129.0215 c119.8555 130.0488 121.0547 130.7832 122.2441 131.2061 c122.3574 131.2461 122.4258 131.3594 122.4102 131.4775 c122.3965 131.5967 122.3008 131.6885 122.1816 131.6982 c115.793 132.2529 111.4121 128.4463 108.666 123.8203 c105.8711 119.1152 101.0957 115.4102 95.4551 116.1504 c95.3359 116.166 95.2227 116.0957 95.1816 115.9824 c95.1426 115.8691 95.1875 115.7422 95.291 115.6807 c98.0879 113.9961 101.1621 113.2969 105.1543 114.6289 C99.3594 109.7197 91.1074 106.8867 83.3145 109.4014 c83.2051 109.4375 83.0859 109.3945 83.0234 109.2979 c82.9609 109.2012 82.9727 109.0752 83.0488 108.9902 c88.957 102.4258 100.7383 102.2949 108.1582 107.6172 C105.1211 103.3008 101.0898 100.1328 93.8652 99.1387 c93.75 99.123 93.6602 99.0313 93.6465 98.916 c93.6348 98.7998 93.7012 98.6904 93.8105 98.6504 c102.1016 95.5723 110.4102 98.6953 117.2559 106.8652 C114.2637 100.4883 109.3496 95.3809 102.4883 92.8535 c102.373 92.8115 102.3047 92.6934 102.3262 92.5742 c102.3457 92.4531 102.4492 92.3643 102.5703 92.3613 c106.5137 92.2803 110.0566 93.2188 114.8359 95.9316 C111.3281 90.2422 112.0957 80.293 117.2051 73.6738 c117.2754 73.582 117.4004 73.5498 117.5078 73.5957 c117.6133 73.6426 117.6758 73.7549 117.6563 73.8691 c116.4766 81.0703 118.9551 89.1992 123.2656 93.5117 C121.1133 85.8799 123.2598 78.9355 129.1621 73.8672 c129.2324 73.8066 129.332 73.79 129.418 73.8232 c129.5059 73.8564 129.5664 73.9355 129.5801 74.0273 c130.8145 83.4453 141.3496 93.002 150.1816 93.8027 c150.3066 93.8135 150.4043 93.9141 150.4121 94.0381 c150.4199 94.1621 150.3379 94.2754 150.2148 94.3027 c145.9355 95.2715 141.5234 94.793 137.8262 93.2715 C140.4863 96.2051 143.7656 98.3828 147.3809 99.5176 c147.498 99.5537 147.5703 99.668 147.5566 99.7891 c147.543 99.9102 147.4434 100.0039 147.3223 100.0127 c142.8125 100.3242 138.3984 99.0068 134.5918 96.4746 C138.9531 103.0957 145.5723 108.0195 154.0195 109.9805 c154.1406 110.0088 154.2227 110.1191 154.2168 110.2432 c154.209 110.3672 154.1133 110.4668 153.9902 110.4805 c142.0723 111.7822 132.2441 107.1621 125.7695 98.5625 C127.418 103.4629 132.1348 108.3184 138.7148 111.1816 c144.5605 113.7266 150.5645 114.1279 155.1367 112.6914 c155.2422 112.6582 155.3594 112.6982 155.4219 112.791 c155.4844 112.8828 155.4805 113.0059 155.4102 113.0938 cf102.5059 37.5215 m107.3125 48.0078 106.9707 56.207 103.0996 66.5762 c103.0547 66.6934 102.9336 66.7607 102.8105 66.7363 c102.6875 66.7109 102.6016 66.5996 102.6074 66.4746 c103.2285 53.8535 99.7813 44.8203 92.3086 38.668 C100.5586 48.5195 96.6621 68.2275 83.4863 68.2275 c73.9004 68.2275 65.9697 60.252 64.0303 50.7031 c64.0059 50.582 64.0723 50.459 64.1885 50.416 c64.3037 50.3711 64.4346 50.416 64.4971 50.5215 c67.3398 55.2832 71.9063 58.373 76.9551 58.373 c85.0898 58.373 87.4961 51.9063 87.4961 47.375 c87.4961 41.1875 82.5703 36.0313 78.7891 36.0313 c75.3516 36.0313 73.748 38.8555 73.748 40.959 c73.748 44.8574 76.7461 48.125 80.125 49.123 c80.2441 49.1582 80.3223 49.2773 80.3047 49.4023 c80.2852 49.5273 80.1797 49.6191 80.0547 49.6211 c75.9473 49.6465 72.4766 47.7656 70.4238 44.0527 C70.1543 46.9277 70.1514 48.7383 71.0645 51.7754 c71.0996 51.8926 71.0459 52.0176 70.9385 52.0742 c70.8291 52.1309 70.6963 52.1016 70.6221 52.0059 c63.2656 42.6133 66.7861 26.3809 72.6016 19.6484 C67.0693 23.6309 62.1846 32.2813 62.2617 44.041 c62.2627 44.1641 62.1768 44.2676 62.0566 44.291 c61.9365 44.3164 61.8174 44.25 61.7725 44.1367 c57.6641 33.8848 59.8438 14.8887 71.0537 4.28516 C68.1699 3.88867 65.1865 3.93945 61.9287 4.97852 c61.8135 5.01367 61.6885 4.96484 61.6299 4.85938 c61.5713 4.75195 61.5947 4.61914 61.6885 4.54102 c65.7803 1.08594 71.5029 0 76.9551 0 C72.2578 5.5 73.8184 16.5547 81.3105 16.5547 c86.6582 16.5547 89.0859 8.25586 84.957 3.77344 c84.8789 3.6875 84.8691 3.55859 84.9316 3.46289 c84.9961 3.36523 85.1172 3.32227 85.2285 3.36133 c90.0078 5.01563 95.1738 9.15039 95.1738 14.377 c95.1738 19.4199 90.3613 23.7715 83.373 23.4277 C92.1914 25.9336 101.4238 23.1602 106.2539 17.1758 c106.3281 17.082 106.459 17.0547 106.5645 17.1074 c106.6719 17.1621 106.7266 17.2832 106.6973 17.3984 c103.9063 28.1152 94.7305 32.5977 83.2578 31.1055 C92.5391 34.8613 106.5078 31.5859 112.6816 23.7949 c112.7539 23.7031 112.8809 23.6738 112.9883 23.7227 c113.0938 23.7734 113.1523 23.8906 113.1289 24.0039 c111.7578 30.6191 108.2656 35.5664 102.5059 37.5215 Cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.411383 0 0.01117 0 0.615686 0.862745 0.976471 Xa 0.411383 0 0.01117 0 0.615686 0.862745 0.976471 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR128.8887 56.8086 m128.8672 56.6895 128.7637 56.6016 128.6426 56.6016 c115.7363 56.4648 103.8887 53.334 94.6719 45.0859 C102.7012 50.6445 117.6133 52.5957 126.1992 48.7051 c126.3086 48.6543 126.3672 48.5332 126.3398 48.416 c126.3145 48.2988 126.207 48.2168 126.0859 48.2188 c115.4063 48.5098 106.8066 45.2129 100.1016 39.2559 C106.9707 38.832 112.6758 34.5156 112.6582 29.4102 c112.6582 29.291 112.5742 29.1875 112.457 29.1621 c112.3418 29.1387 112.2227 29.1973 112.1738 29.3066 c111.0527 31.7949 107.4258 33.0879 103.5918 32.1875 c99.4121 31.2051 96.5918 27.998 97.291 25.0215 c97.7617 23.0078 99.7266 21.6191 102.2422 21.2344 c102.3691 21.2148 102.4629 21.1055 102.459 20.9766 c102.4551 20.8496 102.3574 20.7441 102.2285 20.7305 c101.1602 20.6289 100.0488 20.625 98.9121 20.7344 c92.4219 21.3516 87.3984 25.3281 86.9629 29.9121 C82.25 29.3652 78.0781 26.7539 76.584 23.1387 c76.5391 23.0293 76.4258 22.9668 76.3086 22.9844 c76.1934 23.002 76.1055 23.0977 76.0957 23.2148 c75.7188 27.9648 77.3535 31.0527 81.0664 34.0684 C75.6816 32.0098 69.6201 31.9043 63.8096 34.6055 c63.7041 34.6563 63.6455 34.7715 63.667 34.8867 c63.6904 35.002 63.79 35.0859 63.9072 35.0898 c68.7861 35.2793 72.3242 36.8457 75.6406 40.1621 C57.3838 35.0273 42.5518 46.3633 47.6846 63.2129 c47.7197 63.3301 47.8311 63.4043 47.9521 63.3926 c48.0732 63.3809 48.1689 63.2852 48.1787 63.1641 c49.0967 53.4492 55.8818 47.0469 66.04 46.0879 C60.6533 48.1465 55.04 53.0625 54.4834 61.6211 c54.4756 61.7441 54.5557 61.8535 54.6748 61.8848 c54.7939 61.9141 54.917 61.8535 54.9678 61.7422 c57.7666 55.5879 63.2646 52.4785 69.1279 51.9297 C62.7939 54.5117 58.7314 60.5332 57.5576 68.3516 c57.5381 68.4746 57.6123 68.5918 57.7314 68.6309 c57.8486 68.668 57.9775 68.6152 58.0342 68.5039 c61.8994 60.9219 70.1904 55.7109 80.4824 59.6934 c91.0996 63.8027 95.7559 76.0781 96.7852 84.7324 c96.8008 84.8555 96.9004 84.9492 97.0234 84.957 c97.1465 84.9629 97.2559 84.8809 97.2852 84.7617 c101.0039 69.0723 93.7012 52.8125 80.6484 45.9219 C87.7441 47.9238 94.0879 52.1816 97.6758 59.2754 C105.9688 60.293 111.6797 63.1387 114.5332 68.5156 c114.5898 68.6211 114.7129 68.6738 114.8281 68.6406 c114.9434 68.6055 115.0195 68.4941 115.0098 68.375 c114.8281 66.2656 114.0684 62.0449 110.9355 60.1035 C117.9004 60.1152 123.4414 59.2109 128.7344 57.0898 c128.8457 57.0449 128.9121 56.9277 128.8887 56.8086 cf99.4023 110.2773 m99.502 110.2129 99.6309 110.2227 99.7188 110.3047 c99.8047 110.3848 99.8223 110.5137 99.7637 110.6172 c98.1445 113.4141 99.623 117.4297 102.8145 117.4297 c108.5352 117.4297 111.2852 106.6602 110.4102 96.8379 C108.248 102.5918 106.377 104.8926 103.0625 107.6328 c102.9688 107.709 102.834 107.7109 102.7402 107.6328 c102.6465 107.5566 102.6191 107.4238 102.6777 107.3164 c107.5332 98.2383 108.5742 91.252 108.5742 83.2324 C107.1113 89.1895 105.3789 92.5527 100.4473 97.6133 c100.3613 97.7012 100.2246 97.7148 100.123 97.6445 c100.0215 97.5742 99.9844 97.4414 100.0352 97.3301 c105.334 85.7383 104.9297 72.8828 100.9824 63.0664 c100.9434 62.9688 100.9688 62.8574 101.0449 62.7852 c101.123 62.7129 101.2344 62.6973 101.3301 62.7422 c106.5352 65.293 109.5938 66.9688 114.082 73.1328 C112.7246 80.5313 113.8535 84.1797 117.2539 90.3262 C113.3164 80.4102 115.4121 66.4336 125.4414 60.7363 c125.5508 60.6738 125.6895 60.7012 125.7656 60.8008 c125.8438 60.9004 125.8379 61.041 125.75 61.1328 c121.9688 65.0879 119.2188 71.7676 121.5938 79.0586 C120.0645 68.6699 129.1895 59.9453 139.373 59.9453 c148.9727 59.9453 155.5234 67.4531 154.9824 74.8848 c154.4453 82.25 149.5391 85.8555 145.3105 87.3828 c145.1992 87.4238 145.0742 87.3809 145.0117 87.2813 c144.9473 87.1816 144.9609 87.0508 145.0449 86.9668 c150.6543 81.2734 151.4219 70.4746 141.4609 67.207 C147.3203 72.2637 145.1504 84.0352 135.7715 84.9316 c135.6543 84.9414 135.5449 84.8711 135.5078 84.7598 c135.4688 84.6504 135.5117 84.5273 135.6113 84.4648 c137.6191 83.1855 139.2891 80.6934 139.2891 77.8906 c139.2891 73.2168 135.8672 71.3789 133.6133 71.3789 c130.1914 71.3789 127.3535 74.6348 127.3535 79.5605 c127.3535 85.4023 132.6133 90.2441 139.373 90.9941 c146 91.7305 152.1563 88.8398 155.123 84.5352 c155.1934 84.4336 155.3242 84.3984 155.4375 84.4492 c155.5488 84.5 155.6074 84.623 155.5781 84.7422 c152.5586 96.4453 138.7813 101.6191 128.6895 94.25 C135.3027 101.75 145.6953 101.8555 154.4121 94.1641 c154.502 94.084 154.6367 94.0781 154.7344 94.1523 c154.8301 94.2266 154.8613 94.3574 154.8066 94.4668 c152.1406 99.873 145.5547 106.2852 136.2012 105.3516 c127.6445 104.4961 122.6797 96.3359 121.6777 89.6602 C121.1211 98.1816 123.0723 104.1953 130.4316 109.8047 c130.5293 109.8789 130.5586 110.0117 130.5039 110.1211 c130.4492 110.2305 130.3242 110.2852 130.207 110.25 c123.4219 108.291 117.9766 104.8262 115.1582 97.707 C115.1582 103.8672 117.2969 110.0781 122.6836 114.2168 c122.7813 114.291 122.8105 114.4238 122.7559 114.5332 c122.7012 114.6406 122.5781 114.6953 122.4609 114.6621 c119.0078 113.6797 116.2891 112.1738 114.3223 109.4785 C113.0117 120.5781 107.8008 127.168 101.7969 127.168 c97.6719 127.168 94.5918 124.1348 94.5918 119.2988 c94.5918 116.4688 96.0801 112.4961 99.4023 110.2773 cf0.174805 18.6602 m3.33691 14.7559 9.71387 13.2676 16.6064 14.6719 C16.0967 10.3691 16.9404 5.88086 18.2178 3.18555 c18.2705 3.07813 18.3916 3.01953 18.5088 3.04883 c18.626 3.07813 18.7061 3.18555 18.7021 3.30664 c18.3271 12.0723 23.3252 19.1484 32.1514 22.2148 C25.2451 17.459 23.2256 8.02148 26.5127 3.15039 c26.5811 3.05078 26.708 3.01172 26.8193 3.05664 c26.9307 3.10156 26.9951 3.21875 26.9736 3.33789 c26.6006 5.39844 27.5791 8.02148 29.6865 10.0625 c32.5928 12.877 36.5361 13.5156 38.4971 11.4922 c40.458 9.4668 39.6943 5.54492 36.79 2.73242 c35.7295 1.70508 34.5303 0.96875 33.3408 0.546875 c33.2275 0.505859 33.1592 0.392578 33.1748 0.275391 c33.1885 0.15625 33.2842 0.064453 33.4033 0.054688 c39.792 -0.5 44.1729 3.30664 46.9189 7.93164 c49.7139 12.6367 54.4893 16.3438 60.1299 15.6035 c60.249 15.5879 60.3623 15.6582 60.4033 15.7715 c60.4424 15.8848 60.3975 16.0098 60.2939 16.0723 c57.4971 17.7559 54.4229 18.4551 50.4307 17.125 C56.2256 22.0332 64.4775 24.8652 72.2715 22.3516 c72.3809 22.3164 72.5 22.3594 72.5625 22.4551 c72.625 22.5508 72.6152 22.6777 72.5371 22.7637 c66.6279 29.3281 54.8467 29.459 47.4268 24.1348 C50.4639 28.4512 54.4951 31.6211 61.7197 32.6133 c61.835 32.6289 61.9248 32.7227 61.9385 32.8379 c61.9502 32.9531 61.8838 33.0625 61.7744 33.1035 c53.4834 36.1797 45.1748 33.0586 38.3291 24.8867 C41.3213 31.2656 46.2354 36.373 53.0967 38.9004 c53.2119 38.9414 53.2803 39.0586 53.2588 39.1797 c53.2393 39.3008 53.1357 39.3887 53.0146 39.3906 c49.0713 39.4727 45.5283 38.5332 40.749 35.8203 C44.2568 41.5117 43.4893 51.459 38.3799 58.0801 c38.3096 58.1719 38.1846 58.2031 38.0771 58.1582 c37.9717 58.1113 37.9092 57.998 37.9287 57.8828 c39.1084 50.6836 36.6299 42.5547 32.3193 38.2422 C34.4717 45.873 32.3252 52.8184 26.4229 57.8848 c26.3525 57.9453 26.2529 57.9629 26.167 57.9297 c26.0791 57.8965 26.0186 57.8184 26.0049 57.7266 c24.7705 48.3086 14.2354 38.752 5.40332 37.9512 c5.27832 37.9395 5.18066 37.8398 5.17285 37.7148 c5.16504 37.5898 5.24707 37.4785 5.37012 37.4512 c9.64941 36.4824 14.0615 36.9609 17.7588 38.4805 C15.0986 35.5488 11.8193 33.3711 8.2041 32.2363 c8.08691 32.1992 8.01465 32.0859 8.02832 31.9648 c8.04199 31.8438 8.1416 31.748 8.2627 31.7402 c12.7725 31.4297 17.1865 32.7461 20.9932 35.2793 C16.6318 28.6582 10.0127 23.7344 1.56543 21.7715 c1.44434 21.7441 1.3623 21.6328 1.36816 21.5098 c1.37598 21.3867 1.47168 21.2871 1.59473 21.2734 c13.5127 19.9707 23.3408 24.5918 29.8154 33.1914 C28.167 28.2891 23.4502 23.4355 16.8701 20.5723 c11.0244 18.0273 5.02051 17.625 0.448242 19.0625 c0.342773 19.0957 0.225586 19.0547 0.163086 18.9629 c0.100586 18.8691 0.104492 18.7461 0.174805 18.6602 cf53.0791 94.2324 m48.2725 83.7461 48.6143 75.5469 52.4854 65.1777 c52.5303 65.0605 52.6514 64.9922 52.7744 65.0176 c52.8975 65.043 52.9834 65.1543 52.9775 65.2773 c52.3564 77.9004 55.8037 86.9316 63.2764 93.0859 C55.0264 83.2324 58.9229 63.5254 72.0996 63.5254 c81.6855 63.5254 89.6152 71.502 91.5547 81.0508 c91.5801 81.1719 91.5137 81.293 91.3965 81.3379 c91.2813 81.3828 91.1504 81.3379 91.0879 81.2305 c88.2461 76.4688 83.6797 73.3789 78.6309 73.3789 c70.4951 73.3789 68.0889 79.8457 68.0889 84.3789 c68.0889 90.5645 73.0156 95.7207 76.7969 95.7207 c80.2344 95.7207 81.8379 92.8984 81.8379 90.7949 c81.8379 86.8965 78.8398 83.6289 75.4629 82.6309 c75.3418 82.5938 75.2656 82.4766 75.2832 82.3516 c75.3008 82.2266 75.4063 82.1328 75.5332 82.1328 c79.6387 82.1074 83.1094 83.9863 85.1621 87.7012 C85.4316 84.8262 85.4336 83.0156 84.5215 79.9766 c84.4863 79.8594 84.5391 79.7344 84.6465 79.6777 c84.7559 79.623 84.8887 79.6504 84.9629 79.748 c92.3203 89.1406 88.7988 105.3711 82.9844 112.1055 C88.5156 108.123 93.4004 99.4707 93.3242 87.7109 c93.3223 87.5898 93.4082 87.4844 93.5293 87.4609 c93.6484 87.4375 93.7676 87.502 93.8125 87.6152 c97.9219 97.8691 95.7422 116.8633 84.5313 127.4668 C87.416 127.8652 90.3984 127.8145 93.6563 126.7754 c93.7715 126.7383 93.8965 126.7891 93.9551 126.8945 c94.0137 127 93.9902 127.1328 93.8965 127.2109 c89.8047 130.666 84.082 131.752 78.6309 131.752 C83.3281 126.252 81.7676 115.1992 74.2773 115.1992 c68.9268 115.1992 66.499 123.498 70.6279 127.9805 c70.7061 128.0664 70.7158 128.1934 70.6533 128.291 c70.5889 128.3887 70.4678 128.4297 70.3564 128.3926 c65.5771 126.7363 60.4111 122.6035 60.4111 117.375 c60.4111 112.334 65.2236 107.9805 72.2148 108.3242 C63.3936 105.8203 54.1611 108.5918 49.3311 114.5781 c49.2568 114.6699 49.126 114.6992 49.0205 114.6445 c48.9131 114.5918 48.8584 114.4707 48.8877 114.3535 c51.6787 103.6387 60.8545 99.1543 72.3281 100.6484 C63.0459 96.8906 49.0771 100.166 42.9033 107.957 c42.8311 108.0488 42.7041 108.0801 42.5967 108.0293 c42.4912 107.9805 42.4326 107.8633 42.4561 107.748 c43.8271 101.1328 47.3193 96.1875 53.0791 94.2324 Cf*U%AI6_EndPatternLayer) &(0 O 0 R 1 0.770779 0.225895 0.073884 0 0.258824 0.494118 Xa 1 0.770779 0.225895 0.073884 0 0.258824 0.494118 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR135.0352 184.5869 m135.0566 184.7061 135.1602 184.792 135.2813 184.7939 c148.1875 184.9287 160.0352 188.0615 169.2529 196.3086 C161.2227 190.751 146.3105 188.7979 137.7256 192.6904 c137.6152 192.7402 137.5566 192.8604 137.584 192.9785 c137.6104 193.0967 137.7168 193.1787 137.8379 193.1748 c148.5176 192.8857 157.1172 196.1816 163.8223 202.1396 C156.9531 202.5615 151.248 206.8799 151.2656 211.9844 c151.2656 212.1035 151.3496 212.2061 151.4668 212.2314 c151.583 212.2568 151.7012 212.1963 151.75 212.0879 c152.8711 209.5986 156.498 208.3076 160.333 209.208 c164.5127 210.1885 167.333 213.3975 166.6338 216.373 c166.1621 218.3877 164.1973 219.7764 161.6816 220.1602 c161.5547 220.1787 161.4619 220.29 161.4648 220.418 c161.4688 220.5459 161.5674 220.6514 161.6953 220.6631 c162.7637 220.7656 163.875 220.7695 165.0127 220.6611 c171.5029 220.0439 176.5264 216.0654 176.9619 211.4834 C181.6748 212.0303 185.8467 214.6396 187.3408 218.2568 c187.3857 218.3652 187.501 218.4287 187.6162 218.4111 c187.7314 218.3916 187.8193 218.2969 187.8291 218.1807 c188.2061 213.4287 186.5713 210.3418 182.8584 207.3262 C188.2432 209.3857 194.3027 209.4912 200.1133 206.7881 c200.2188 206.7393 200.2773 206.624 200.2559 206.5088 c200.2324 206.3936 200.1328 206.3096 200.0156 206.3057 c195.1367 206.1152 191.5996 204.5498 188.2861 201.2334 C206.5391 206.3672 221.3711 195.0322 216.2383 178.1807 c216.2031 178.0654 216.0918 177.9902 215.9707 178.0029 c215.8496 178.0146 215.7539 178.1104 215.7441 178.2314 c214.8262 187.9453 208.041 194.3467 197.8828 195.3076 C203.2695 193.2471 208.8828 188.3311 209.4395 179.7734 c209.4473 179.6514 209.3672 179.54 209.248 179.5107 c209.1289 179.4814 209.0059 179.54 208.9551 179.6514 c206.1563 185.8057 200.6582 188.917 194.7949 189.4639 C201.1289 186.8838 205.1914 180.8623 206.3652 173.0439 c206.3848 172.9209 206.3105 172.8018 206.1914 172.7646 c206.0742 172.7256 205.9453 172.7803 205.8887 172.8896 c202.0234 180.4727 193.7324 185.6836 183.4424 181.7021 c172.8252 177.5928 168.168 165.3154 167.1387 156.6611 c167.124 156.54 167.0234 156.4463 166.9004 156.4385 c166.7783 156.4307 166.668 156.5127 166.6396 156.6338 c162.9199 172.3213 170.2227 188.583 183.2764 195.4736 C176.1807 193.4707 169.8369 189.2139 166.249 182.1191 C157.9551 181.1006 152.2451 178.2568 149.3916 172.8799 c149.335 172.7725 149.2109 172.7197 149.0957 172.7549 c148.9805 172.7881 148.9043 172.8994 148.9141 173.0205 c149.0967 175.1299 149.8555 179.3506 152.9883 181.291 C146.0234 181.2803 140.4824 182.1846 135.1895 184.3037 c135.0781 184.3496 135.0127 184.4678 135.0352 184.5869 cf164.5215 131.1162 m164.4229 131.1826 164.293 131.1709 164.2061 131.0908 c164.1201 131.0088 164.1016 130.8799 164.1602 130.7783 c165.7803 127.9814 164.3008 123.9639 161.1094 123.9639 c155.3887 123.9639 152.6387 134.7334 153.5137 144.5576 C155.6768 138.8018 157.5469 136.5029 160.8613 133.7627 c160.9551 133.6846 161.0898 133.6846 161.1836 133.7607 c161.2773 133.8389 161.3047 133.9697 161.2471 134.0771 c156.3906 143.1572 155.3496 150.1436 155.3496 158.1631 C156.8125 152.2041 158.5449 148.8408 163.4766 143.7822 c163.5625 143.6943 163.6992 143.6807 163.8018 143.749 c163.9033 143.8193 163.9404 143.9521 163.8887 144.0654 c158.5908 155.6553 158.9951 168.5127 162.9414 178.3291 c162.9805 178.4268 162.9561 178.5381 162.8789 178.6104 c162.8018 178.6807 162.6895 178.6982 162.5938 178.6514 c157.3887 176.1006 154.3301 174.4248 149.8418 168.2627 C151.1992 160.8643 150.0703 157.2139 146.6699 151.0674 C150.6074 160.9854 148.5117 174.9619 138.4824 180.6592 c138.373 180.7207 138.2344 180.6934 138.1582 180.5947 c138.0801 180.4951 138.0869 180.3535 138.1738 180.2627 c141.9551 176.3076 144.7051 169.6279 142.3301 162.335 C143.8594 172.7236 134.7344 181.4502 124.5508 181.4502 c114.9512 181.4502 108.4004 173.9404 108.9414 166.5088 c109.4785 159.1436 114.3848 155.54 118.6133 154.0107 c118.7246 153.9717 118.8496 154.0127 118.9131 154.1123 c118.9766 154.2139 118.9629 154.3428 118.8799 154.4287 c113.2695 160.1201 112.502 170.9209 122.4629 174.1885 C116.6035 169.1318 118.7734 157.3584 128.1523 156.4639 c128.2695 156.4521 128.3789 156.5225 128.417 156.6338 c128.4551 156.7451 128.4121 156.8682 128.3135 156.9307 c126.3047 158.208 124.6348 160.7021 124.6348 163.5049 c124.6348 168.1787 128.0566 170.0146 130.3105 170.0146 c133.7324 170.0146 136.5703 166.7588 136.5703 161.835 c136.5703 155.9912 131.3105 151.1514 124.5508 150.3994 c117.9248 149.665 111.7686 152.5537 108.8008 156.8584 c108.7314 156.96 108.5996 156.9971 108.4873 156.9463 c108.375 156.8955 108.3164 156.7705 108.3467 156.6514 c111.3652 144.9482 125.1426 139.7744 135.2344 147.1455 C128.6211 139.6436 118.2285 139.54 109.5127 147.2314 c109.4219 147.3115 109.2871 147.3154 109.1904 147.2412 c109.0938 147.1689 109.0635 147.0361 109.1172 146.9287 c111.7842 141.5205 118.3701 135.1084 127.7227 136.0439 c136.2793 136.8994 141.2441 145.0576 142.2461 151.7354 C142.8027 143.2139 140.8525 137.1982 133.4922 131.5889 c133.3955 131.5146 133.3652 131.3818 133.4199 131.2725 c133.4746 131.165 133.5996 131.1104 133.7168 131.1436 c140.502 133.1045 145.9473 136.5693 148.7656 143.6885 C148.7656 137.5264 146.627 131.3154 141.2402 127.1768 c141.1426 127.1025 141.1133 126.9717 141.168 126.8623 c141.2227 126.7529 141.3467 126.6982 141.4639 126.7314 c144.917 127.7158 147.6348 129.2197 149.6016 131.917 C150.9121 120.8174 156.123 114.2256 162.127 114.2256 c166.252 114.2256 169.332 117.2588 169.332 122.0967 c169.332 124.9268 167.8438 128.8994 164.5215 131.1162 cf263.748 222.7354 m260.5859 226.6396 254.209 228.1279 247.3164 226.7236 C247.8262 231.0244 246.9824 235.5146 245.7051 238.208 c245.6523 238.3174 245.5313 238.375 245.4141 238.3467 c245.2969 238.3174 245.2168 238.21 245.2207 238.0889 c245.5957 229.3223 240.5977 222.2451 231.7715 219.1787 C238.6777 223.9346 240.6973 233.3721 237.4102 238.2451 c237.3418 238.3438 237.2148 238.3828 237.1035 238.3369 c236.9922 238.292 236.9277 238.1748 236.9492 238.0576 c237.3223 235.9971 236.3438 233.373 234.2363 231.3311 c231.3301 228.5166 227.3867 227.8779 225.4258 229.9014 c223.4648 231.9268 224.2285 235.8486 227.1328 238.6631 c228.1934 239.6904 229.3926 240.4248 230.582 240.8477 c230.6953 240.8877 230.7637 241.001 230.748 241.1191 c230.7344 241.2383 230.6387 241.3301 230.5195 241.3398 c224.1309 241.8945 219.75 238.0879 217.0039 233.4619 c214.209 228.7568 209.4336 225.0518 203.793 225.792 c203.6738 225.8076 203.5605 225.7373 203.5195 225.624 c203.4805 225.5107 203.5254 225.3838 203.6289 225.3223 c206.4258 223.6377 209.5 222.9385 213.4922 224.2705 C207.6973 219.3613 199.4453 216.5283 191.6523 219.043 c191.543 219.0791 191.4238 219.0361 191.3613 218.9395 c191.2988 218.8428 191.3105 218.7168 191.3867 218.6318 c197.2949 212.0674 209.0762 211.9365 216.4961 217.2588 C213.459 212.9424 209.4277 209.7744 202.2031 208.7803 c202.0879 208.7646 201.998 208.6729 201.9844 208.5576 c201.9727 208.4414 202.0391 208.332 202.1484 208.292 c210.4395 205.2139 218.748 208.3369 225.5938 216.5068 C222.6016 210.1299 217.6875 205.0225 210.8262 202.4951 c210.7109 202.4531 210.6426 202.335 210.6641 202.2158 c210.6836 202.0947 210.7871 202.0059 210.9082 202.0029 c214.8516 201.9219 218.3945 202.8604 223.1738 205.5732 C219.666 199.8838 220.4336 189.9346 225.543 183.3154 c225.6133 183.2236 225.7383 183.1914 225.8457 183.2373 c225.9512 183.2842 226.0137 183.3965 225.9941 183.5107 c224.8145 190.7119 227.293 198.8408 231.6035 203.1533 C229.4512 195.5215 231.5977 188.5771 237.5 183.5088 c237.5703 183.4482 237.6699 183.4316 237.7559 183.4648 c237.8438 183.498 237.9043 183.5771 237.918 183.6689 c239.1523 193.0869 249.6875 202.6436 258.5195 203.4443 c258.6445 203.4551 258.7422 203.5557 258.75 203.6797 c258.7578 203.8037 258.6758 203.917 258.5527 203.9443 c254.2734 204.9131 249.8613 204.4346 246.1641 202.9131 C248.8242 205.8467 252.1035 208.0244 255.7188 209.1592 c255.8359 209.1953 255.9082 209.3096 255.8945 209.4307 c255.8809 209.5518 255.7813 209.6455 255.6602 209.6543 c251.1504 209.9658 246.7363 208.6484 242.9297 206.1162 C247.291 212.7373 253.9102 217.6611 262.3574 219.6221 c262.4785 219.6504 262.5605 219.7607 262.5547 219.8848 c262.5469 220.0088 262.4512 220.1084 262.3281 220.1221 c250.4102 221.4238 240.582 216.8037 234.1074 208.2041 C235.7559 213.1045 240.4727 217.96 247.0527 220.8232 c252.8984 223.3682 258.9023 223.7695 263.4746 222.333 c263.5801 222.2998 263.6973 222.3398 263.7598 222.4326 c263.8223 222.5244 263.8184 222.6475 263.748 222.7354 cf210.8438 147.1631 m215.6504 157.6494 215.3086 165.8486 211.4375 176.2178 c211.3926 176.335 211.2715 176.4023 211.1484 176.3779 c211.0254 176.3525 210.9395 176.2412 210.9453 176.1162 c211.5664 163.4951 208.1191 154.4619 200.6465 148.3096 C208.8965 158.1611 205 177.8691 191.8242 177.8691 c182.2393 177.8691 174.3086 169.8936 172.3691 160.3447 c172.3447 160.2236 172.4111 160.1006 172.5273 160.0576 c172.6426 160.0127 172.7734 160.0576 172.8359 160.1631 c175.6787 164.9248 180.2451 168.0146 185.2939 168.0146 c193.4277 168.0146 195.834 161.5479 195.834 157.0166 c195.834 150.8291 190.9082 145.6729 187.1279 145.6729 c183.6904 145.6729 182.0869 148.4971 182.0869 150.6006 c182.0869 154.499 185.085 157.7666 188.4639 158.7646 c188.583 158.7998 188.6611 158.9189 188.6436 159.0439 c188.624 159.1689 188.5186 159.2607 188.3936 159.2627 c184.2861 159.2881 180.8154 157.4072 178.7627 153.6943 C178.4932 156.5693 178.4902 158.3799 179.4033 161.417 c179.4385 161.5342 179.3848 161.6592 179.2773 161.7158 c179.168 161.7725 179.0352 161.7432 178.9609 161.6475 c171.6045 152.2549 175.125 136.0225 180.9404 129.29 C175.4082 133.2725 170.5234 141.9229 170.6006 153.6826 c170.6016 153.8057 170.5156 153.9092 170.3955 153.9326 c170.2754 153.958 170.1563 153.8916 170.1113 153.7783 c166.0029 143.5264 168.1826 124.5303 179.3926 113.9268 C176.5088 113.5303 173.5254 113.5811 170.2676 114.6201 c170.1523 114.6553 170.0273 114.6064 169.9688 114.501 c169.9102 114.3936 169.9336 114.2607 170.0273 114.1826 c174.1191 110.7275 179.8418 109.6416 185.2939 109.6416 C180.5967 115.1416 182.1572 126.1963 189.6494 126.1963 c194.9961 126.1963 197.4238 117.8975 193.2949 113.415 c193.2168 113.3291 193.207 113.2002 193.2695 113.1045 c193.334 113.0068 193.4551 112.9639 193.5664 113.0029 c198.3457 114.6572 203.5117 118.792 203.5117 124.0186 c203.5117 129.0615 198.6992 133.4131 191.7109 133.0693 C200.5293 135.5752 209.7617 132.8018 214.5918 126.8174 c214.666 126.7236 214.7969 126.6963 214.9023 126.749 c215.0098 126.8037 215.0645 126.9248 215.0352 127.04 c212.2441 137.7568 203.0684 142.2393 191.5957 140.7471 C200.877 144.5029 214.8457 141.2275 221.0195 133.4365 c221.0918 133.3447 221.2188 133.3154 221.3262 133.3643 c221.4316 133.415 221.4902 133.5322 221.4668 133.6455 c220.0957 140.2607 216.6035 145.208 210.8438 147.1631 Cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.411383 0 0.01117 0 0.615686 0.862745 0.976471 Xa 0.411383 0 0.01117 0 0.615686 0.862745 0.976471 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR237.2266 166.4502 m237.2051 166.3311 237.1016 166.2432 236.9805 166.2432 c224.0742 166.1064 212.2266 162.9756 203.0098 154.7275 C211.0391 160.2861 225.9512 162.2373 234.5371 158.3467 c234.6465 158.2959 234.7051 158.1748 234.6777 158.0576 c234.6523 157.9404 234.5449 157.8584 234.4238 157.8604 c223.7441 158.1514 215.1445 154.8545 208.4395 148.8975 C215.3086 148.4736 221.0137 144.1572 220.9961 139.0518 c220.9961 138.9326 220.9121 138.8291 220.7949 138.8037 c220.6797 138.7803 220.5605 138.8389 220.5117 138.9482 c219.3906 141.4365 215.7637 142.7295 211.9297 141.8291 c207.75 140.8467 204.9297 137.6396 205.6289 134.6631 c206.0996 132.6494 208.0645 131.2607 210.5801 130.876 c210.707 130.8564 210.8008 130.7471 210.7969 130.6182 c210.793 130.4912 210.6953 130.3857 210.5664 130.3721 c209.498 130.2705 208.3867 130.2666 207.25 130.376 c200.7598 130.9932 195.7363 134.9697 195.3008 139.5537 C190.5889 139.0068 186.417 136.3955 184.9229 132.7803 c184.8779 132.6709 184.7646 132.6084 184.6475 132.626 c184.5322 132.6436 184.4443 132.7393 184.4346 132.8564 c184.0576 137.6064 185.6924 140.6943 189.4053 143.71 C184.0205 141.6514 177.959 141.5459 172.1484 144.2471 c172.043 144.2979 171.9844 144.4131 172.0059 144.5283 c172.0293 144.6436 172.1289 144.7275 172.2461 144.7314 c177.125 144.9209 180.6631 146.4873 183.9795 149.8037 C165.7227 144.6689 150.8906 156.0049 156.0234 172.8545 c156.0586 172.9717 156.1699 173.0459 156.291 173.0342 c156.4121 173.0225 156.5078 172.9268 156.5176 172.8057 c157.4355 163.0908 164.2207 156.6885 174.3789 155.7295 C168.9922 157.7881 163.3789 162.7041 162.8223 171.2627 c162.8145 171.3857 162.8945 171.4951 163.0137 171.5264 c163.1328 171.5557 163.2559 171.4951 163.3066 171.3838 c166.1055 165.2295 171.6035 162.1201 177.4668 161.5713 C171.1328 164.1533 167.0703 170.1748 165.8965 177.9932 c165.877 178.1162 165.9512 178.2334 166.0703 178.2725 c166.1875 178.3096 166.3164 178.2568 166.373 178.1455 c170.2383 170.5635 178.5293 165.3525 188.8213 169.335 c199.4375 173.4443 204.0938 185.7197 205.123 194.374 c205.1387 194.4971 205.2383 194.5908 205.3613 194.5986 c205.4844 194.6045 205.5938 194.5225 205.623 194.4033 c209.3418 178.7139 202.0391 162.4541 188.9873 155.5635 C196.082 157.5654 202.4258 161.8232 206.0137 168.917 C214.3066 169.9346 220.0176 172.7803 222.8711 178.1572 c222.9277 178.2627 223.0508 178.3154 223.166 178.2822 c223.2813 178.2471 223.3574 178.1357 223.3477 178.0166 c223.166 175.9072 222.4063 171.6865 219.2734 169.7451 C226.2383 169.7568 231.7793 168.8525 237.0723 166.7314 c237.1836 166.6865 237.25 166.5693 237.2266 166.4502 cf207.7402 219.9189 m207.8398 219.8545 207.9688 219.8643 208.0566 219.9463 c208.1426 220.0264 208.1602 220.1553 208.1016 220.2588 c206.4824 223.0557 207.9609 227.0713 211.1523 227.0713 c216.873 227.0713 219.623 216.3018 218.748 206.4795 C216.5859 212.2334 214.7148 214.5342 211.4004 217.2744 c211.3066 217.3506 211.1719 217.3525 211.0781 217.2744 c210.9844 217.1982 210.957 217.0654 211.0156 216.958 c215.8711 207.8799 216.9121 200.8936 216.9121 192.874 C215.4492 198.8311 213.7168 202.1943 208.7852 207.2549 c208.6992 207.3428 208.5625 207.3564 208.4609 207.2861 c208.3594 207.2158 208.3223 207.083 208.373 206.9717 c213.6719 195.3799 213.2676 182.5244 209.3203 172.708 c209.2813 172.6104 209.3066 172.499 209.3828 172.4268 c209.4609 172.3545 209.5723 172.3389 209.668 172.3838 c214.873 174.9346 217.9316 176.6104 222.4199 182.7744 C221.0625 190.1729 222.1914 193.8213 225.5918 199.9678 C221.6543 190.0518 223.75 176.0752 233.7793 170.3779 c233.8887 170.3154 234.0273 170.3428 234.1035 170.4424 c234.1816 170.542 234.1758 170.6826 234.0879 170.7744 c230.3066 174.7295 227.5566 181.4092 229.9316 188.7002 C228.4023 178.3115 237.5273 169.5869 247.7109 169.5869 c257.3105 169.5869 263.8613 177.0947 263.3203 184.5264 c262.7832 191.8916 257.877 195.4971 253.6484 197.0244 c253.5371 197.0654 253.4121 197.0225 253.3496 196.9229 c253.2852 196.8232 253.2988 196.6924 253.3828 196.6084 c258.9922 190.915 259.7598 180.1162 249.7988 176.8486 C255.6582 181.9053 253.4883 193.6768 244.1094 194.5732 c243.9922 194.583 243.8828 194.5127 243.8457 194.4014 c243.8066 194.292 243.8496 194.1689 243.9492 194.1064 c245.957 192.8271 247.627 190.335 247.627 187.5322 c247.627 182.8584 244.2051 181.0205 241.9512 181.0205 c238.5293 181.0205 235.6914 184.2764 235.6914 189.2021 c235.6914 195.0439 240.9512 199.8857 247.7109 200.6357 c254.3379 201.3721 260.4941 198.4814 263.4609 194.1768 c263.5313 194.0752 263.6621 194.04 263.7754 194.0908 c263.8867 194.1416 263.9453 194.2646 263.916 194.3838 c260.8965 206.0869 247.1191 211.2607 237.0273 203.8916 C243.6406 211.3916 254.0332 211.4971 262.75 203.8057 c262.8398 203.7256 262.9746 203.7197 263.0723 203.7939 c263.168 203.8682 263.1992 203.999 263.1445 204.1084 c260.4785 209.5146 253.8926 215.9268 244.5391 214.9932 c235.9824 214.1377 231.0176 205.9775 230.0156 199.3018 C229.459 207.8232 231.4102 213.8369 238.7695 219.4463 c238.8672 219.5205 238.8965 219.6533 238.8418 219.7627 c238.7871 219.8721 238.6621 219.9268 238.5449 219.8916 c231.7598 217.9326 226.3145 214.4678 223.4961 207.3486 C223.4961 213.5088 225.6348 219.7197 231.0215 223.8584 c231.1191 223.9326 231.1484 224.0654 231.0938 224.1748 c231.0391 224.2822 230.916 224.3369 230.7988 224.3037 c227.3457 223.3213 224.627 221.8154 222.6602 219.1201 C221.3496 230.2197 216.1387 236.8096 210.1348 236.8096 c206.0098 236.8096 202.9297 233.7764 202.9297 228.9404 c202.9297 226.1104 204.418 222.1377 207.7402 219.9189 cf108.5137 128.3018 m111.6758 124.3975 118.0527 122.9092 124.9453 124.3135 C124.4355 120.0107 125.2793 115.5225 126.5566 112.8271 c126.6094 112.7197 126.7305 112.6611 126.8477 112.6904 c126.9648 112.7197 127.0449 112.8271 127.041 112.9482 c126.666 121.7139 131.6641 128.79 140.4902 131.8564 C133.584 127.1006 131.5645 117.6631 134.8516 112.792 c134.9199 112.6924 135.0469 112.6533 135.1582 112.6982 c135.2695 112.7432 135.334 112.8604 135.3125 112.9795 c134.9395 115.04 135.918 117.6631 138.0254 119.7041 c140.9316 122.5186 144.875 123.1572 146.8359 121.1338 c148.7969 119.1084 148.0332 115.1865 145.1289 112.374 c144.0684 111.3467 142.8691 110.6104 141.6797 110.1885 c141.5664 110.1475 141.498 110.0342 141.5137 109.917 c141.5273 109.7979 141.623 109.7061 141.7422 109.6963 c148.1309 109.1416 152.5117 112.9482 155.2578 117.5732 c158.0527 122.2783 162.8281 125.9854 168.4688 125.2451 c168.5879 125.2295 168.7012 125.2998 168.7422 125.4131 c168.7813 125.5264 168.7363 125.6514 168.6328 125.7139 c165.8359 127.3975 162.7617 128.0967 158.7695 126.7666 C164.5645 131.6748 172.8164 134.5068 180.6104 131.9932 c180.7197 131.958 180.8389 132.001 180.9014 132.0967 c180.9639 132.1924 180.9541 132.3193 180.876 132.4053 c174.9668 138.9697 163.1855 139.1006 155.7656 133.7764 C158.8027 138.0928 162.834 141.2627 170.0586 142.2549 c170.1738 142.2705 170.2637 142.3643 170.2773 142.4795 c170.2891 142.5947 170.2227 142.7041 170.1133 142.7451 c161.8223 145.8213 153.5137 142.7002 146.668 134.5283 C149.6602 140.9072 154.5742 146.0146 161.4355 148.542 c161.5508 148.583 161.6191 148.7002 161.5977 148.8213 c161.5781 148.9424 161.4746 149.0303 161.3535 149.0322 c157.4102 149.1143 153.8672 148.1748 149.0879 145.4619 C152.5957 151.1533 151.8281 161.1006 146.7188 167.7217 c146.6484 167.8135 146.5234 167.8447 146.416 167.7998 c146.3105 167.7529 146.248 167.6396 146.2676 167.5244 c147.4473 160.3252 144.9688 152.1963 140.6582 147.8838 C142.8105 155.5146 140.6641 162.46 134.7617 167.5264 c134.6914 167.5869 134.5918 167.6045 134.5059 167.5713 c134.418 167.5381 134.3574 167.46 134.3438 167.3682 c133.1094 157.9502 122.5742 148.3936 113.7422 147.5928 c113.6172 147.5811 113.5195 147.4814 113.5117 147.3564 c113.5039 147.2314 113.5859 147.1201 113.709 147.0928 c117.9883 146.124 122.4004 146.6025 126.0977 148.1221 C123.4375 145.1904 120.1582 143.0127 116.543 141.8779 c116.4258 141.8408 116.3535 141.7275 116.3672 141.6064 c116.3809 141.4854 116.4805 141.3896 116.6016 141.3818 c121.1113 141.0713 125.5254 142.3877 129.332 144.9209 C124.9707 138.2998 118.3516 133.376 109.9043 131.4131 c109.7832 131.3857 109.7012 131.2744 109.707 131.1514 c109.7148 131.0283 109.8105 130.9287 109.9336 130.915 c121.8516 129.6123 131.6797 134.2334 138.1543 142.833 C136.5059 137.9307 131.7891 133.0771 125.209 130.2139 c119.3633 127.6689 113.3594 127.2666 108.7871 128.7041 c108.6816 128.7373 108.5645 128.6963 108.502 128.6045 c108.4395 128.5107 108.4434 128.3877 108.5137 128.3018 cf161.418 203.874 m156.6113 193.3877 156.9531 185.1885 160.8242 174.8193 c160.8691 174.7021 160.9902 174.6338 161.1133 174.6592 c161.2363 174.6846 161.3223 174.7959 161.3164 174.9189 c160.6953 187.542 164.1426 196.5732 171.6152 202.7275 C163.3652 192.874 167.2617 173.167 180.4385 173.167 c190.0244 173.167 197.9531 181.1436 199.8926 190.6924 c199.918 190.8135 199.8516 190.9346 199.7344 190.9795 c199.6191 191.0244 199.4883 190.9795 199.4258 190.8721 c196.584 186.1104 192.0176 183.0205 186.9697 183.0205 c178.834 183.0205 176.4277 189.4873 176.4277 194.0205 c176.4277 200.2061 181.3545 205.3623 185.1357 205.3623 c188.5732 205.3623 190.1768 202.54 190.1768 200.4365 c190.1768 196.5381 187.1787 193.2705 183.8018 192.2725 c183.6807 192.2354 183.6045 192.1182 183.6221 191.9932 c183.6396 191.8682 183.7451 191.7744 183.8721 191.7744 c187.9775 191.749 191.4473 193.6279 193.5 197.3428 C193.7695 194.4678 193.7715 192.6572 192.8594 189.6182 c192.8242 189.501 192.877 189.376 192.9844 189.3193 c193.0938 189.2646 193.2266 189.292 193.3008 189.3896 c200.6582 198.7822 197.1367 215.0127 191.3223 221.7471 C196.8535 217.7646 201.7383 209.1123 201.6621 197.3525 c201.6602 197.2314 201.7461 197.126 201.8672 197.1025 c201.9863 197.0791 202.1055 197.1436 202.1504 197.2568 c206.2598 207.5107 204.0801 226.5049 192.8691 237.1084 C195.7539 237.5068 198.7363 237.4561 201.9941 236.417 c202.1094 236.3799 202.2344 236.4307 202.293 236.5361 c202.3516 236.6416 202.3281 236.7744 202.2344 236.8525 c198.1426 240.3076 192.4199 241.3936 186.9697 241.3936 C191.666 235.8936 190.1064 224.8408 182.6162 224.8408 c177.2656 224.8408 174.8379 233.1396 178.9668 237.6221 c179.0449 237.708 179.0547 237.835 178.9922 237.9326 c178.9277 238.0303 178.8066 238.0713 178.6953 238.0342 c173.916 236.3779 168.75 232.2451 168.75 227.0166 c168.75 221.9756 173.5625 217.6221 180.5537 217.9658 C171.7324 215.4619 162.5 218.2334 157.6699 224.2197 c157.5957 224.3115 157.4648 224.3408 157.3594 224.2861 c157.252 224.2334 157.1973 224.1123 157.2266 223.9951 c160.0176 213.2803 169.1934 208.7959 180.667 210.29 C171.3848 206.5322 157.416 209.8076 151.2422 217.5986 c151.1699 217.6904 151.043 217.7217 150.9355 217.6709 c150.8301 217.6221 150.7715 217.5049 150.7949 217.3896 c152.166 210.7744 155.6582 205.8291 161.418 203.874 Cf*U%AI6_EndPatternLayer) &(0 O 0 R 1 0.770779 0.225895 0.073884 0 0.258824 0.494118 Xa 1 0.770779 0.225895 0.073884 0 0.258824 0.494118 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR26.6963 184.5869 m26.7178 184.7061 26.8213 184.792 26.9424 184.7939 c39.8486 184.9287 51.6963 188.0615 60.9141 196.3086 C52.8838 190.751 37.9717 188.7979 29.3867 192.6904 c29.2764 192.7402 29.2178 192.8604 29.2451 192.9785 c29.2715 193.0967 29.3779 193.1787 29.499 193.1748 c40.1787 192.8857 48.7783 196.1816 55.4834 202.1396 C48.6143 202.5615 42.9092 206.8799 42.9268 211.9844 c42.9268 212.1035 43.0107 212.2061 43.1279 212.2314 c43.2441 212.2568 43.3623 212.1963 43.4111 212.0879 c44.5322 209.5986 48.1592 208.3076 51.9941 209.208 c56.1738 210.1885 58.9941 213.3975 58.2949 216.373 c57.8232 218.3877 55.8584 219.7764 53.3428 220.1602 c53.2158 220.1787 53.123 220.29 53.126 220.418 c53.1299 220.5459 53.2285 220.6514 53.3564 220.6631 c54.4248 220.7656 55.5361 220.7695 56.6738 220.6611 c63.1641 220.0439 68.1875 216.0654 68.623 211.4834 C73.3359 212.0303 77.5078 214.6396 79.002 218.2568 c79.0469 218.3652 79.1621 218.4287 79.2773 218.4111 c79.3926 218.3916 79.4805 218.2969 79.4902 218.1807 c79.8672 213.4287 78.2324 210.3418 74.5195 207.3262 C79.9043 209.3857 85.9648 209.4912 91.7754 206.7881 c91.8809 206.7393 91.9395 206.624 91.918 206.5088 c91.8945 206.3936 91.7949 206.3096 91.6777 206.3057 c86.7988 206.1152 83.2617 204.5498 79.9473 201.2334 C98.2012 206.3672 113.0332 195.0322 107.9004 178.1807 c107.8652 178.0654 107.7539 177.9902 107.6328 178.0029 c107.5117 178.0146 107.416 178.1104 107.4063 178.2314 c106.4883 187.9453 99.7031 194.3467 89.5449 195.3076 C94.9316 193.2471 100.5449 188.3311 101.1016 179.7734 c101.1094 179.6514 101.0293 179.54 100.9102 179.5107 c100.791 179.4814 100.668 179.54 100.6172 179.6514 c97.8184 185.8057 92.3203 188.917 86.457 189.4639 C92.791 186.8838 96.8535 180.8623 98.0273 173.0439 c98.0469 172.9209 97.9727 172.8018 97.8535 172.7646 c97.7363 172.7256 97.6074 172.7803 97.5508 172.8896 c93.6855 180.4727 85.3945 185.6836 75.1035 181.7021 c64.4863 177.5928 59.8291 165.3154 58.7998 156.6611 c58.7852 156.54 58.6846 156.4463 58.5615 156.4385 c58.4395 156.4307 58.3291 156.5127 58.3008 156.6338 c54.5811 172.3213 61.8838 188.583 74.9375 195.4736 C67.8418 193.4707 61.498 189.2139 57.9102 182.1191 C49.6162 181.1006 43.9063 178.2568 41.0527 172.8799 c40.9961 172.7725 40.8721 172.7197 40.7568 172.7549 c40.6416 172.7881 40.5654 172.8994 40.5752 173.0205 c40.7578 175.1299 41.5166 179.3506 44.6494 181.291 C37.6846 181.2803 32.1436 182.1846 26.8506 184.3037 c26.7393 184.3496 26.6738 184.4678 26.6963 184.5869 cf56.1826 131.1162 m56.084 131.1826 55.9541 131.1709 55.8672 131.0908 c55.7813 131.0088 55.7627 130.8799 55.8213 130.7783 c57.4414 127.9814 55.9619 123.9639 52.7705 123.9639 c47.0498 123.9639 44.2998 134.7334 45.1748 144.5576 C47.3379 138.8018 49.208 136.5029 52.5225 133.7627 c52.6162 133.6846 52.751 133.6846 52.8447 133.7607 c52.9385 133.8389 52.9658 133.9697 52.9082 134.0771 c48.0518 143.1572 47.0107 150.1436 47.0107 158.1631 C48.4736 152.2041 50.2061 148.8408 55.1377 143.7822 c55.2236 143.6943 55.3604 143.6807 55.4629 143.749 c55.5645 143.8193 55.6016 143.9521 55.5498 144.0654 c50.252 155.6553 50.6563 168.5127 54.6025 178.3291 c54.6416 178.4268 54.6172 178.5381 54.54 178.6104 c54.4629 178.6807 54.3506 178.6982 54.2549 178.6514 c49.0498 176.1006 45.9912 174.4248 41.5029 168.2627 C42.8604 160.8643 41.7314 157.2139 38.3311 151.0674 C42.2686 160.9854 40.1729 174.9619 30.1436 180.6592 c30.0342 180.7207 29.8955 180.6934 29.8193 180.5947 c29.7412 180.4951 29.748 180.3535 29.835 180.2627 c33.6162 176.3076 36.3662 169.6279 33.9912 162.335 C35.5205 172.7236 26.3955 181.4502 16.2119 181.4502 c6.6123 181.4502 0.061523 173.9404 0.602539 166.5088 c1.13965 159.1436 6.0459 155.54 10.2744 154.0107 c10.3857 153.9717 10.5107 154.0127 10.5742 154.1123 c10.6377 154.2139 10.624 154.3428 10.541 154.4287 c4.93066 160.1201 4.16309 170.9209 14.124 174.1885 C8.26465 169.1318 10.4346 157.3584 19.8135 156.4639 c19.9307 156.4521 20.04 156.5225 20.0781 156.6338 c20.1162 156.7451 20.0732 156.8682 19.9746 156.9307 c17.9658 158.208 16.2959 160.7021 16.2959 163.5049 c16.2959 168.1787 19.7178 170.0146 21.9717 170.0146 c25.3936 170.0146 28.2314 166.7588 28.2314 161.835 c28.2314 155.9912 22.9717 151.1514 16.2119 150.3994 c9.58594 149.665 3.42969 152.5537 0.461914 156.8584 c0.392578 156.96 0.260742 156.9971 0.148438 156.9463 c0.036133 156.8955 -0.022461 156.7705 0.007813 156.6514 c3.02637 144.9482 16.8037 139.7744 26.8955 147.1455 C20.2822 139.6436 9.88965 139.54 1.17383 147.2314 c1.08301 147.3115 0.948242 147.3154 0.851563 147.2412 c0.754883 147.1689 0.724609 147.0361 0.77832 146.9287 c3.44531 141.5205 10.0313 135.1084 19.3838 136.0439 c27.9404 136.8994 32.9053 145.0576 33.9072 151.7354 C34.4639 143.2139 32.5137 137.1982 25.1533 131.5889 c25.0566 131.5146 25.0264 131.3818 25.0811 131.2725 c25.1357 131.165 25.2607 131.1104 25.3779 131.1436 c32.1631 133.1045 37.6084 136.5693 40.4268 143.6885 C40.4268 137.5264 38.2881 131.3154 32.9014 127.1768 c32.8037 127.1025 32.7744 126.9717 32.8291 126.8623 c32.8838 126.7529 33.0078 126.6982 33.125 126.7314 c36.5781 127.7158 39.2959 129.2197 41.2627 131.917 C42.5732 120.8174 47.7842 114.2256 53.7881 114.2256 c57.9131 114.2256 60.9932 117.2588 60.9932 122.0967 c60.9932 124.9268 59.5049 128.8994 56.1826 131.1162 cf155.4102 222.7354 m152.248 226.6396 145.8711 228.1279 138.9785 226.7236 C139.4883 231.0244 138.6445 235.5146 137.3672 238.208 c137.3145 238.3174 137.1934 238.375 137.0762 238.3467 c136.959 238.3174 136.8789 238.21 136.8828 238.0889 c137.2578 229.3223 132.2598 222.2451 123.4336 219.1787 C130.3398 223.9346 132.3594 233.3721 129.0723 238.2451 c129.0039 238.3438 128.877 238.3828 128.7656 238.3369 c128.6543 238.292 128.5898 238.1748 128.6113 238.0576 c128.9844 235.9971 128.0059 233.373 125.8984 231.3311 c122.9922 228.5166 119.0488 227.8779 117.0879 229.9014 c115.127 231.9268 115.8906 235.8486 118.7949 238.6631 c119.8555 239.6904 121.0547 240.4248 122.2441 240.8477 c122.3574 240.8877 122.4258 241.001 122.4102 241.1191 c122.3965 241.2383 122.3008 241.3301 122.1816 241.3398 c115.793 241.8945 111.4121 238.0879 108.666 233.4619 c105.8711 228.7568 101.0957 225.0518 95.4551 225.792 c95.3359 225.8076 95.2227 225.7373 95.1816 225.624 c95.1426 225.5107 95.1875 225.3838 95.291 225.3223 c98.0879 223.6377 101.1621 222.9385 105.1543 224.2705 C99.3594 219.3613 91.1074 216.5283 83.3145 219.043 c83.2051 219.0791 83.0859 219.0361 83.0234 218.9395 c82.9609 218.8428 82.9727 218.7168 83.0488 218.6318 c88.957 212.0674 100.7383 211.9365 108.1582 217.2588 C105.1211 212.9424 101.0898 209.7744 93.8652 208.7803 c93.75 208.7646 93.6602 208.6729 93.6465 208.5576 c93.6348 208.4414 93.7012 208.332 93.8105 208.292 c102.1016 205.2139 110.4102 208.3369 117.2559 216.5068 C114.2637 210.1299 109.3496 205.0225 102.4883 202.4951 c102.373 202.4531 102.3047 202.335 102.3262 202.2158 c102.3457 202.0947 102.4492 202.0059 102.5703 202.0029 c106.5137 201.9219 110.0566 202.8604 114.8359 205.5732 C111.3281 199.8838 112.0957 189.9346 117.2051 183.3154 c117.2754 183.2236 117.4004 183.1914 117.5078 183.2373 c117.6133 183.2842 117.6758 183.3965 117.6563 183.5107 c116.4766 190.7119 118.9551 198.8408 123.2656 203.1533 C121.1133 195.5215 123.2598 188.5771 129.1621 183.5088 c129.2324 183.4482 129.332 183.4316 129.418 183.4648 c129.5059 183.498 129.5664 183.5771 129.5801 183.6689 c130.8145 193.0869 141.3496 202.6436 150.1816 203.4443 c150.3066 203.4551 150.4043 203.5557 150.4121 203.6797 c150.4199 203.8037 150.3379 203.917 150.2148 203.9443 c145.9355 204.9131 141.5234 204.4346 137.8262 202.9131 C140.4863 205.8467 143.7656 208.0244 147.3809 209.1592 c147.498 209.1953 147.5703 209.3096 147.5566 209.4307 c147.543 209.5518 147.4434 209.6455 147.3223 209.6543 c142.8125 209.9658 138.3984 208.6484 134.5918 206.1162 C138.9531 212.7373 145.5723 217.6611 154.0195 219.6221 c154.1406 219.6504 154.2227 219.7607 154.2168 219.8848 c154.209 220.0088 154.1133 220.1084 153.9902 220.1221 c142.0723 221.4238 132.2441 216.8037 125.7695 208.2041 C127.418 213.1045 132.1348 217.96 138.7148 220.8232 c144.5605 223.3682 150.5645 223.7695 155.1367 222.333 c155.2422 222.2998 155.3594 222.3398 155.4219 222.4326 c155.4844 222.5244 155.4805 222.6475 155.4102 222.7354 cf102.5059 147.1631 m107.3125 157.6494 106.9707 165.8486 103.0996 176.2178 c103.0547 176.335 102.9336 176.4023 102.8105 176.3779 c102.6875 176.3525 102.6016 176.2412 102.6074 176.1162 c103.2285 163.4951 99.7813 154.4619 92.3086 148.3096 C100.5586 158.1611 96.6621 177.8691 83.4863 177.8691 c73.9004 177.8691 65.9697 169.8936 64.0303 160.3447 c64.0059 160.2236 64.0723 160.1006 64.1885 160.0576 c64.3037 160.0127 64.4346 160.0576 64.4971 160.1631 c67.3398 164.9248 71.9063 168.0146 76.9551 168.0146 c85.0898 168.0146 87.4961 161.5479 87.4961 157.0166 c87.4961 150.8291 82.5703 145.6729 78.7891 145.6729 c75.3516 145.6729 73.748 148.4971 73.748 150.6006 c73.748 154.499 76.7461 157.7666 80.125 158.7646 c80.2441 158.7998 80.3223 158.9189 80.3047 159.0439 c80.2852 159.1689 80.1797 159.2607 80.0547 159.2627 c75.9473 159.2881 72.4766 157.4072 70.4238 153.6943 C70.1543 156.5693 70.1514 158.3799 71.0645 161.417 c71.0996 161.5342 71.0459 161.6592 70.9385 161.7158 c70.8291 161.7725 70.6963 161.7432 70.6221 161.6475 c63.2656 152.2549 66.7861 136.0225 72.6016 129.29 C67.0693 133.2725 62.1846 141.9229 62.2617 153.6826 c62.2627 153.8057 62.1768 153.9092 62.0566 153.9326 c61.9365 153.958 61.8174 153.8916 61.7725 153.7783 c57.6641 143.5264 59.8438 124.5303 71.0537 113.9268 C68.1699 113.5303 65.1865 113.5811 61.9287 114.6201 c61.8135 114.6553 61.6885 114.6064 61.6299 114.501 c61.5713 114.3936 61.5947 114.2607 61.6885 114.1826 c65.7803 110.7275 71.5029 109.6416 76.9551 109.6416 C72.2578 115.1416 73.8184 126.1963 81.3105 126.1963 c86.6582 126.1963 89.0859 117.8975 84.957 113.415 c84.8789 113.3291 84.8691 113.2002 84.9316 113.1045 c84.9961 113.0068 85.1172 112.9639 85.2285 113.0029 c90.0078 114.6572 95.1738 118.792 95.1738 124.0186 c95.1738 129.0615 90.3613 133.4131 83.373 133.0693 C92.1914 135.5752 101.4238 132.8018 106.2539 126.8174 c106.3281 126.7236 106.459 126.6963 106.5645 126.749 c106.6719 126.8037 106.7266 126.9248 106.6973 127.04 c103.9063 137.7568 94.7305 142.2393 83.2578 140.7471 C92.5391 144.5029 106.5078 141.2275 112.6816 133.4365 c112.7539 133.3447 112.8809 133.3154 112.9883 133.3643 c113.0938 133.415 113.1523 133.5322 113.1289 133.6455 c111.7578 140.2607 108.2656 145.208 102.5059 147.1631 Cf*U%AI6_EndPatternLayer) &(0 O 0 R 0.411383 0 0.01117 0 0.615686 0.862745 0.976471 Xa 0.411383 0 0.01117 0 0.615686 0.862745 0.976471 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 10 M []0 d0 XR128.8887 166.4502 m128.8672 166.3311 128.7637 166.2432 128.6426 166.2432 c115.7363 166.1064 103.8887 162.9756 94.6719 154.7275 C102.7012 160.2861 117.6133 162.2373 126.1992 158.3467 c126.3086 158.2959 126.3672 158.1748 126.3398 158.0576 c126.3145 157.9404 126.207 157.8584 126.0859 157.8604 c115.4063 158.1514 106.8066 154.8545 100.1016 148.8975 C106.9707 148.4736 112.6758 144.1572 112.6582 139.0518 c112.6582 138.9326 112.5742 138.8291 112.457 138.8037 c112.3418 138.7803 112.2227 138.8389 112.1738 138.9482 c111.0527 141.4365 107.4258 142.7295 103.5918 141.8291 c99.4121 140.8467 96.5918 137.6396 97.291 134.6631 c97.7617 132.6494 99.7266 131.2607 102.2422 130.876 c102.3691 130.8564 102.4629 130.7471 102.459 130.6182 c102.4551 130.4912 102.3574 130.3857 102.2285 130.3721 c101.1602 130.2705 100.0488 130.2666 98.9121 130.376 c92.4219 130.9932 87.3984 134.9697 86.9629 139.5537 C82.25 139.0068 78.0781 136.3955 76.584 132.7803 c76.5391 132.6709 76.4258 132.6084 76.3086 132.626 c76.1934 132.6436 76.1055 132.7393 76.0957 132.8564 c75.7188 137.6064 77.3535 140.6943 81.0664 143.71 C75.6816 141.6514 69.6201 141.5459 63.8096 144.2471 c63.7041 144.2979 63.6455 144.4131 63.667 144.5283 c63.6904 144.6436 63.79 144.7275 63.9072 144.7314 c68.7861 144.9209 72.3242 146.4873 75.6406 149.8037 C57.3838 144.6689 42.5518 156.0049 47.6846 172.8545 c47.7197 172.9717 47.8311 173.0459 47.9521 173.0342 c48.0732 173.0225 48.1689 172.9268 48.1787 172.8057 c49.0967 163.0908 55.8818 156.6885 66.04 155.7295 C60.6533 157.7881 55.04 162.7041 54.4834 171.2627 c54.4756 171.3857 54.5557 171.4951 54.6748 171.5264 c54.7939 171.5557 54.917 171.4951 54.9678 171.3838 c57.7666 165.2295 63.2646 162.1201 69.1279 161.5713 C62.7939 164.1533 58.7314 170.1748 57.5576 177.9932 c57.5381 178.1162 57.6123 178.2334 57.7314 178.2725 c57.8486 178.3096 57.9775 178.2568 58.0342 178.1455 c61.8994 170.5635 70.1904 165.3525 80.4824 169.335 c91.0996 173.4443 95.7559 185.7197 96.7852 194.374 c96.8008 194.4971 96.9004 194.5908 97.0234 194.5986 c97.1465 194.6045 97.2559 194.5225 97.2852 194.4033 c101.0039 178.7139 93.7012 162.4541 80.6484 155.5635 C87.7441 157.5654 94.0879 161.8232 97.6758 168.917 C105.9688 169.9346 111.6797 172.7803 114.5332 178.1572 c114.5898 178.2627 114.7129 178.3154 114.8281 178.2822 c114.9434 178.2471 115.0195 178.1357 115.0098 178.0166 c114.8281 175.9072 114.0684 171.6865 110.9355 169.7451 C117.9004 169.7568 123.4414 168.8525 128.7344 166.7314 c128.8457 166.6865 128.9121 166.5693 128.8887 166.4502 cf99.4023 219.9189 m99.502 219.8545 99.6309 219.8643 99.7188 219.9463 c99.8047 220.0264 99.8223 220.1553 99.7637 220.2588 c98.1445 223.0557 99.623 227.0713 102.8145 227.0713 c108.5352 227.0713 111.2852 216.3018 110.4102 206.4795 C108.248 212.2334 106.377 214.5342 103.0625 217.2744 c102.9688 217.3506 102.834 217.3525 102.7402 217.2744 c102.6465 217.1982 102.6191 217.0654 102.6777 216.958 c107.5332 207.8799 108.5742 200.8936 108.5742 192.874 C107.1113 198.8311 105.3789 202.1943 100.4473 207.2549 c100.3613 207.3428 100.2246 207.3564 100.123 207.2861 c100.0215 207.2158 99.9844 207.083 100.0352 206.9717 c105.334 195.3799 104.9297 182.5244 100.9824 172.708 c100.9434 172.6104 100.9688 172.499 101.0449 172.4268 c101.123 172.3545 101.2344 172.3389 101.3301 172.3838 c106.5352 174.9346 109.5938 176.6104 114.082 182.7744 C112.7246 190.1729 113.8535 193.8213 117.2539 199.9678 C113.3164 190.0518 115.4121 176.0752 125.4414 170.3779 c125.5508 170.3154 125.6895 170.3428 125.7656 170.4424 c125.8438 170.542 125.8379 170.6826 125.75 170.7744 c121.9688 174.7295 119.2188 181.4092 121.5938 188.7002 C120.0645 178.3115 129.1895 169.5869 139.373 169.5869 c148.9727 169.5869 155.5234 177.0947 154.9824 184.5264 c154.4453 191.8916 149.5391 195.4971 145.3105 197.0244 c145.1992 197.0654 145.0742 197.0225 145.0117 196.9229 c144.9473 196.8232 144.9609 196.6924 145.0449 196.6084 c150.6543 190.915 151.4219 180.1162 141.4609 176.8486 C147.3203 181.9053 145.1504 193.6768 135.7715 194.5732 c135.6543 194.583 135.5449 194.5127 135.5078 194.4014 c135.4688 194.292 135.5117 194.1689 135.6113 194.1064 c137.6191 192.8271 139.2891 190.335 139.2891 187.5322 c139.2891 182.8584 135.8672 181.0205 133.6133 181.0205 c130.1914 181.0205 127.3535 184.2764 127.3535 189.2021 c127.3535 195.0439 132.6133 199.8857 139.373 200.6357 c146 201.3721 152.1563 198.4814 155.123 194.1768 c155.1934 194.0752 155.3242 194.04 155.4375 194.0908 c155.5488 194.1416 155.6074 194.2646 155.5781 194.3838 c152.5586 206.0869 138.7813 211.2607 128.6895 203.8916 C135.3027 211.3916 145.6953 211.4971 154.4121 203.8057 c154.502 203.7256 154.6367 203.7197 154.7344 203.7939 c154.8301 203.8682 154.8613 203.999 154.8066 204.1084 c152.1406 209.5146 145.5547 215.9268 136.2012 214.9932 c127.6445 214.1377 122.6797 205.9775 121.6777 199.3018 C121.1211 207.8232 123.0723 213.8369 130.4316 219.4463 c130.5293 219.5205 130.5586 219.6533 130.5039 219.7627 c130.4492 219.8721 130.3242 219.9268 130.207 219.8916 c123.4219 217.9326 117.9766 214.4678 115.1582 207.3486 C115.1582 213.5088 117.2969 219.7197 122.6836 223.8584 c122.7813 223.9326 122.8105 224.0654 122.7559 224.1748 c122.7012 224.2822 122.5781 224.3369 122.4609 224.3037 c119.0078 223.3213 116.2891 221.8154 114.3223 219.1201 C113.0117 230.2197 107.8008 236.8096 101.7969 236.8096 c97.6719 236.8096 94.5918 233.7764 94.5918 228.9404 c94.5918 226.1104 96.0801 222.1377 99.4023 219.9189 cf0.174805 128.3018 m3.33691 124.3975 9.71387 122.9092 16.6064 124.3135 C16.0967 120.0107 16.9404 115.5225 18.2178 112.8271 c18.2705 112.7197 18.3916 112.6611 18.5088 112.6904 c18.626 112.7197 18.7061 112.8271 18.7021 112.9482 c18.3271 121.7139 23.3252 128.79 32.1514 131.8564 C25.2451 127.1006 23.2256 117.6631 26.5127 112.792 c26.5811 112.6924 26.708 112.6533 26.8193 112.6982 c26.9307 112.7432 26.9951 112.8604 26.9736 112.9795 c26.6006 115.04 27.5791 117.6631 29.6865 119.7041 c32.5928 122.5186 36.5361 123.1572 38.4971 121.1338 c40.458 119.1084 39.6943 115.1865 36.79 112.374 c35.7295 111.3467 34.5303 110.6104 33.3408 110.1885 c33.2275 110.1475 33.1592 110.0342 33.1748 109.917 c33.1885 109.7979 33.2842 109.7061 33.4033 109.6963 c39.792 109.1416 44.1729 112.9482 46.9189 117.5732 c49.7139 122.2783 54.4893 125.9854 60.1299 125.2451 c60.249 125.2295 60.3623 125.2998 60.4033 125.4131 c60.4424 125.5264 60.3975 125.6514 60.2939 125.7139 c57.4971 127.3975 54.4229 128.0967 50.4307 126.7666 C56.2256 131.6748 64.4775 134.5068 72.2715 131.9932 c72.3809 131.958 72.5 132.001 72.5625 132.0967 c72.625 132.1924 72.6152 132.3193 72.5371 132.4053 c66.6279 138.9697 54.8467 139.1006 47.4268 133.7764 C50.4639 138.0928 54.4951 141.2627 61.7197 142.2549 c61.835 142.2705 61.9248 142.3643 61.9385 142.4795 c61.9502 142.5947 61.8838 142.7041 61.7744 142.7451 c53.4834 145.8213 45.1748 142.7002 38.3291 134.5283 C41.3213 140.9072 46.2354 146.0146 53.0967 148.542 c53.2119 148.583 53.2803 148.7002 53.2588 148.8213 c53.2393 148.9424 53.1357 149.0303 53.0146 149.0322 c49.0713 149.1143 45.5283 148.1748 40.749 145.4619 C44.2568 151.1533 43.4893 161.1006 38.3799 167.7217 c38.3096 167.8135 38.1846 167.8447 38.0771 167.7998 c37.9717 167.7529 37.9092 167.6396 37.9287 167.5244 c39.1084 160.3252 36.6299 152.1963 32.3193 147.8838 C34.4717 155.5146 32.3252 162.46 26.4229 167.5264 c26.3525 167.5869 26.2529 167.6045 26.167 167.5713 c26.0791 167.5381 26.0186 167.46 26.0049 167.3682 c24.7705 157.9502 14.2354 148.3936 5.40332 147.5928 c5.27832 147.5811 5.18066 147.4814 5.17285 147.3564 c5.16504 147.2314 5.24707 147.1201 5.37012 147.0928 c9.64941 146.124 14.0615 146.6025 17.7588 148.1221 C15.0986 145.1904 11.8193 143.0127 8.2041 141.8779 c8.08691 141.8408 8.01465 141.7275 8.02832 141.6064 c8.04199 141.4854 8.1416 141.3896 8.2627 141.3818 c12.7725 141.0713 17.1865 142.3877 20.9932 144.9209 C16.6318 138.2998 10.0127 133.376 1.56543 131.4131 c1.44434 131.3857 1.3623 131.2744 1.36816 131.1514 c1.37598 131.0283 1.47168 130.9287 1.59473 130.915 c13.5127 129.6123 23.3408 134.2334 29.8154 142.833 C28.167 137.9307 23.4502 133.0771 16.8701 130.2139 c11.0244 127.6689 5.02051 127.2666 0.448242 128.7041 c0.342773 128.7373 0.225586 128.6963 0.163086 128.6045 c0.100586 128.5107 0.104492 128.3877 0.174805 128.3018 cf53.0791 203.874 m48.2725 193.3877 48.6143 185.1885 52.4854 174.8193 c52.5303 174.7021 52.6514 174.6338 52.7744 174.6592 c52.8975 174.6846 52.9834 174.7959 52.9775 174.9189 c52.3564 187.542 55.8037 196.5732 63.2764 202.7275 C55.0264 192.874 58.9229 173.167 72.0996 173.167 c81.6855 173.167 89.6152 181.1436 91.5547 190.6924 c91.5801 190.8135 91.5137 190.9346 91.3965 190.9795 c91.2813 191.0244 91.1504 190.9795 91.0879 190.8721 c88.2461 186.1104 83.6797 183.0205 78.6309 183.0205 c70.4951 183.0205 68.0889 189.4873 68.0889 194.0205 c68.0889 200.2061 73.0156 205.3623 76.7969 205.3623 c80.2344 205.3623 81.8379 202.54 81.8379 200.4365 c81.8379 196.5381 78.8398 193.2705 75.4629 192.2725 c75.3418 192.2354 75.2656 192.1182 75.2832 191.9932 c75.3008 191.8682 75.4063 191.7744 75.5332 191.7744 c79.6387 191.749 83.1094 193.6279 85.1621 197.3428 C85.4316 194.4678 85.4336 192.6572 84.5215 189.6182 c84.4863 189.501 84.5391 189.376 84.6465 189.3193 c84.7559 189.2646 84.8887 189.292 84.9629 189.3896 c92.3203 198.7822 88.7988 215.0127 82.9844 221.7471 C88.5156 217.7646 93.4004 209.1123 93.3242 197.3525 c93.3223 197.2314 93.4082 197.126 93.5293 197.1025 c93.6484 197.0791 93.7676 197.1436 93.8125 197.2568 c97.9219 207.5107 95.7422 226.5049 84.5313 237.1084 C87.416 237.5068 90.3984 237.4561 93.6563 236.417 c93.7715 236.3799 93.8965 236.4307 93.9551 236.5361 c94.0137 236.6416 93.9902 236.7744 93.8965 236.8525 c89.8047 240.3076 84.082 241.3936 78.6309 241.3936 C83.3281 235.8936 81.7676 224.8408 74.2773 224.8408 c68.9268 224.8408 66.499 233.1396 70.6279 237.6221 c70.7061 237.708 70.7158 237.835 70.6533 237.9326 c70.5889 238.0303 70.4678 238.0713 70.3564 238.0342 c65.5771 236.3779 60.4111 232.2451 60.4111 227.0166 c60.4111 221.9756 65.2236 217.6221 72.2148 217.9658 C63.3936 215.4619 54.1611 218.2334 49.3311 224.2197 c49.2568 224.3115 49.126 224.3408 49.0205 224.2861 c48.9131 224.2334 48.8584 224.1123 48.8877 223.9951 c51.6787 213.2803 60.8545 208.7959 72.3281 210.29 C63.0459 206.5322 49.0771 209.8076 42.9033 217.5986 c42.8311 217.6904 42.7041 217.7217 42.5967 217.6709 c42.4912 217.6221 42.4326 217.5049 42.4561 217.3896 c43.8271 210.7744 47.3193 205.8291 53.0791 203.874 Cf*U%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed 6)0 Auu0 J 0 j 1 w 4 M []0 d0 XR-3058.5 5158.5 m-2957.1816 5158.5 L-2957.1816 5150.7832 L-3058.5 5150.7832 L-3058.5 5158.5 Lnu0 O0.722866 0.672938 0.586633 0.79205 0.137255 0.121569 0.12549 Xa-2957.3 5152.2073 m-2957.1504 5152.2439 -2957.2041 5151.8247 -2957.1816 5151.7495 C-2957.4319 5151.8423 -2957.2937 5152.3159 -2957.3 5152.2073 Cf-2959.7693 5153.1582 m-2959.7256 5152.9871 L-2960.0896 5153.4063 L-2959.7693 5153.1582 Lf-2962.0784 5153.1504 m-2961.8601 5153.8643 -2961.2417 5153.0352 -2960.8303 5153.2888 C-2960.7625 5153.4524 L-2960.5769 5152.8772 L-2961.0769 5152.9683 -2961.7263 5153.3499 -2962.0784 5153.1504 Cf-2963.3096 5151.6072 m-2963.2336 5151.8843 -2963.5759 5151.8455 -2963.0225 5151.6936 C-2963.0503 5151.6631 -2963.0583 5151.6455 -2963.0745 5151.6233 C-2963.1243 5151.6272 -2963.1929 5151.6262 -2963.3096 5151.6072 Cf-2963.0745 5151.6233 m-2962.8313 5151.6033 -2963.2336 5151.3904 -2963.0745 5151.6233 C-2963.0745 5151.6233 Lf-2964.1975 5151.782 m-2963.8772 5151.5342 L-2963.9441 5151.3704 -2964.2292 5151.3333 -2964.1233 5151.2134 C-2964.4519 5151.3496 -2964.3843 5151.5127 -2964.1975 5151.782 Cf-2964.5012 5152.303 m-2964.3352 5152.198 L-2964.3643 5152.1294 -2964.4082 5152.105 -2964.5012 5152.303 Cf-2963.9832 5151.9768 m-2964.3352 5152.198 L-2964.2888 5152.313 -2964.2839 5152.5447 -2964.1736 5152.1184 C-2964.2024 5152.3296 -2964.1328 5152.1262 -2963.9832 5151.9768 Cf-2963.7839 5152.0852 m-2963.6042 5152.2405 -2963.3721 5152.3384 -2963.6936 5152.5852 C-2963.0808 5152.4871 -2963.1711 5151.9856 -2963.7839 5152.0852 Cf-2962.1963 5153.8887 m-2961.9561 5154.0984 L-2961.7483 5153.8584 L-2961.8521 5153.9771 -2962.2112 5153.6653 -2962.1963 5153.8887 Cf-2966.1929 5151.4126 m-2966.2129 5151.5647 -2966.0852 5151.8174 -2966.0613 5152.0122 C-2965.8247 5151.8374 L-2965.9463 5151.7334 -2966.1768 5151.6375 -2966.1929 5151.4126 Cf-2966.0613 5152.0122 m-2966.4153 5152.2727 L-2966.0991 5152.303 -2966.0413 5152.1792 -2966.0613 5152.0122 Cf-2964.5583 5153.0955 m-2963.9768 5152.5479 L-2964.6704 5153.1033 L-2964.5583 5153.0955 Lf-2967.5449 5151.3936 m-2967.3442 5151.042 L-2967.7017 5151.5735 L-2967.5449 5151.3936 Lf-2968.4417 5151.4551 m-2968.2932 5151.1638 -2968.6453 5150.9624 -2968.4883 5150.7832 C-2968.7319 5150.8352 -2968.9399 5151.0852 -2969.1272 5151.3103 C-2968.9282 5151.1848 -2968.7161 5151.2168 -2968.4417 5151.4551 Cf-2969.4417 5151.6375 m-2969.3423 5151.5679 -2969.2393 5151.4431 -2969.1272 5151.3103 C-2969.2329 5151.3772 -2969.3369 5151.4744 -2969.4417 5151.6375 Cf-2967.0183 5152.1975 m-2967.0457 5152.1055 -2967.0984 5151.8655 -2967.2969 5151.7639 C-2967.1577 5152.1912 L-2967.1152 5152.1936 -2967.0671 5152.1951 -2967.0183 5152.1975 Cf-2967.1528 5152.2046 m-2967.1577 5152.1912 L-2967.3088 5152.1814 -2967.4136 5152.1719 -2967.4585 5152.167 c-2967.4199 5152.1707 -2967.3279 5152.1824 -2967.1528 5152.2046 Cf-2966.9832 5152.1992 m-2966.9961 5152.198 -2967.0056 5152.1975 -2967.0183 5152.1975 C-2967.0049 5152.24 -2966.9968 5152.2534 -2966.9832 5152.1992 Cf-2965.4863 5152.709 m-2965.6943 5152.948 -2966.1279 5153.2039 -2965.7083 5153.5686 C-2965.5591 5153.2759 -2965.7993 5153.0686 -2965.4863 5152.709 cf-2966.8103 5152.7334 m-2966.4343 5152.8311 L-2966.4417 5152.7183 -2966.5095 5152.5535 -2966.4065 5152.4351 C-2966.8103 5152.7334 Lf-2966.9944 5152.8694 m-2966.8103 5152.7334 L-2966.9497 5152.6975 L-2966.9944 5152.8694 Lf-2968.7976 5152.0376 m-2968.96 5152.2239 -2969.1377 5152.2393 -2969.3384 5152.2693 C-2969.1233 5152.3533 -2968.9009 5152.3992 -2968.6897 5152.3972 C-2968.6599 5152.2632 -2968.5671 5152.0222 -2968.7976 5152.0376 Cf-2967.9983 5152.1563 m-2968.0095 5152.1663 -2968.0239 5152.1707 -2968.0344 5152.1807 C-2968.0122 5152.2173 -2967.9944 5152.2283 -2967.9983 5152.1563 Cf-2971.3142 5152.2664 m-2971.3032 5152.2896 -2971.2937 5152.3196 -2971.2825 5152.344 C-2971.28 5152.3196 -2971.2783 5152.2952 -2971.2751 5152.27 C-2971.3142 5152.2664 Lf-2968.6536 5152.4771 m-2968.4919 5152.5598 -2968.3953 5152.4551 -2968.3032 5152.3242 C-2968.4241 5152.3662 -2968.5522 5152.3943 -2968.6897 5152.3972 C-2968.7031 5152.4583 -2968.7056 5152.4983 -2968.6536 5152.4771 Cf-2969.9929 5151.8374 m-2969.9087 5151.9272 -2969.8132 5152.0032 -2969.7129 5152.0723 C-2969.7952 5151.9373 -2969.9631 5151.7263 -2969.9929 5151.8374 Cf-2968.0889 5152.0623 m-2968.0808 5152.0559 -2968.0735 5152.0479 -2968.0647 5152.0432 C-2968.1177 5151.9524 -2968.1111 5151.9966 -2968.0889 5152.0623 Cf-2968.0889 5152.0623 m-2968.1721 5152.1243 -2968.2375 5152.2295 -2968.3032 5152.3242 C-2968.2048 5152.2896 -2968.1135 5152.2439 -2968.0344 5152.1807 C-2968.0544 5152.1504 -2968.0745 5152.104 -2968.0889 5152.0623 Cf-2971.9128 5155.0093 m-2971.8843 5154.6133 -2971.4592 5154.2471 -2971.0923 5154.6719 C-2970.7312 5154.375 -2970.9673 5153.0723 -2971.2825 5152.344 C-2971.2937 5152.5166 -2971.2937 5152.6763 -2971.6653 5152.9104 C-2971.5352 5153.126 -2970.8408 5153.4163 -2971.1543 5153.7747 C-2971.6465 5153.9783 -2971.5576 5153.6343 -2971.7969 5153.4253 C-2971.5935 5153.9182 -2972.4231 5154.1431 -2972.3159 5154.8687 C-2971.8843 5154.6133 L-2971.8762 5154.7263 -2972.0327 5154.9063 -2971.9128 5155.0093 Cf-2970.5745 5152.3843 m-2970.4216 5152.3352 L-2970.5959 5152.2664 -2970.7207 5152.1079 -2970.9504 5151.7976 C-2971.2048 5151.9915 -2971.2576 5152.1382 -2971.2751 5152.27 C-2970.5222 5152.3252 L-2970.5745 5152.3843 Lf-2969.7351 5152.3335 m-2969.8545 5152.7644 -2970.2217 5152.948 -2969.9968 5153.4143 C-2969.5481 5153.3843 -2969.6824 5153.0542 -2969.4143 5152.8672 C-2970.1384 5152.9744 -2969.2063 5152.6272 -2969.7295 5152.3831 C-2969.5872 5152.3096 -2969.4592 5152.2871 -2969.3384 5152.2693 C-2969.4688 5152.2173 -2969.5945 5152.1519 -2969.7129 5152.0723 C-2969.7063 5152.0823 -2969.7017 5152.0896 -2969.6963 5152.0989 C-2969.6929 5152.0984 L-2969.6929 5152.1006 -2969.6936 5152.1016 -2969.6936 5152.104 C-2969.6624 5152.1582 -2969.6521 5152.1912 -2969.6873 5152.1604 C-2969.6897 5152.1653 -2969.6985 5152.167 -2969.7024 5152.1692 C-2969.7073 5152.2283 -2969.7207 5152.2808 -2969.7351 5152.3311 C-2969.9448 5152.2422 -2969.7681 5152.22 -2969.7024 5152.1692 C-2969.7 5152.1472 -2969.6943 5152.1272 -2969.6936 5152.104 C-2969.6943 5152.1023 -2969.6953 5152.1006 -2969.6963 5152.0989 C-2970.4216 5152.3352 L-2970.2681 5152.3953 -2970.0759 5152.3831 -2969.7351 5152.3335 Cf-2966.0952 5154.4951 m-2966.1177 5154.4573 -2966.1167 5154.4263 -2966.1184 5154.3953 C-2966.1653 5154.448 -2966.1831 5154.4839 -2966.0952 5154.4951 Cf-2966.3936 5154.2351 m-2966.3408 5154.1753 -2966.2969 5154.0032 -2966.1255 5154.0471 C-2965.9768 5154.1763 -2966.1262 5154.2534 -2966.1184 5154.3953 C-2966.0151 5154.2808 -2965.7568 5154.0862 -2966.0808 5153.8762 C-2966.1321 5153.9351 L-2966.4241 5153.7871 -2966.7993 5153.2495 -2966.7483 5153.1902 C-2966.6631 5153.5784 -2966.5879 5153.854 -2966.3936 5154.2351 Cf-2968.0852 5153.3943 m-2968.6892 5153.6055 L-2968.3816 5153.9783 L-2968.3972 5153.7544 L-2968.0537 5153.8423 -2968.1279 5153.5667 -2968.0852 5153.3943 Cf-2971.3833 5152.052 m-2971.3032 5151.5967 L-2971.6521 5152.24 L-2971.3833 5152.052 Lf-2972.1682 5152.1062 m-2972.1392 5151.7112 L-2972.3464 5151.9495 L-2972.1682 5152.1062 Lf-3016.4617 5157.0166 m-3016.6392 5157.1287 L-3016.5552 5157.094 -3016.5012 5157.0564 -3016.4617 5157.0166 Cf-3015.1768 5157.0435 m-3015.1453 5156.8484 L-3015.2048 5156.9558 -3015.2292 5157.0352 -3015.1768 5157.0435 Cf-2991.4456 5152.1509 m-2991.7041 5151.7815 -2991.9929 5151.2083 -2991.9617 5151.6536 C-2991.8823 5152.0872 L-2991.7017 5152.0093 -2991.5632 5152.0576 -2991.4456 5152.1509 Cf-3004.6479 5154.7415 m-3004.6233 5154.7832 -3004.5977 5154.8286 -3004.5723 5154.8728 C-3004.5095 5154.7246 -3004.4504 5154.5872 -3004.3977 5154.4583 C-3004.4729 5154.5471 -3004.5583 5154.6416 -3004.6479 5154.7415 Cf-3004.8303 5156.5364 m-3005.1711 5156.2566 L-3005.0945 5156.354 -3004.9849 5156.448 -3004.8303 5156.5364 Cf-3023.4792 5157.4768 m-3023.6863 5157.9182 L-3023.3623 5157.9163 -3023.5049 5157.6936 -3023.4792 5157.4768 Cf-2980.2073 5152.2664 m-2980.4304 5152.0967 -2980.6079 5152.0254 -2980.7639 5152.0044 C-2980.4951 5152.2534 -2980.2783 5152.6272 -2980.2073 5152.2664 Cf-3015.9561 5152.4126 m-3016.0647 5152.4912 -3016.1111 5152.5796 -3016.1079 5152.6763 C-3015.9961 5152.6023 -3015.9329 5152.5193 -3015.9561 5152.4126 Cf-2981.4082 5152.0059 m-2981.3689 5152.0496 -2981.3303 5152.0713 -2981.2903 5152.1079 C-2981.1272 5152.0352 -2980.9631 5151.9768 -2980.7639 5152.0044 C-2980.9624 5151.8196 -2981.1897 5151.7046 -2981.4082 5152.0059 Cf-3048.9297 5157.1172 m-3048.9482 5157.0984 -3048.9705 5157.0884 -3048.9873 5157.0652 C-3048.9929 5157.1243 -3048.9673 5157.1272 -3048.9297 5157.1172 Cf-3056.3442 5152.74 m-3056.2712 5152.7124 -3056.1521 5152.7119 -3056.0398 5152.7063 C-3056.0945 5152.6763 -3056.1863 5152.6792 -3056.3442 5152.74 cf-2975.3264 5151.917 m-2975.1599 5151.8887 -2975.3 5151.8694 -2975.3264 5151.917 C-2975.3264 5151.917 Lf-2974.5168 5153.6331 m-2974.5522 5153.6814 -2974.5791 5153.7439 -2974.5833 5153.844 C-2974.5696 5153.74 -2974.5464 5153.6736 -2974.5168 5153.6331 cf-2983.0664 5154.7063 m-2983.0713 5154.7063 -2983.0752 5154.7046 -2983.0808 5154.7046 C-2983.0313 5154.7896 -2983.0398 5154.7732 -2983.0664 5154.7063 Cf-2975.0759 5152.1143 m-2975.1384 5152.0613 -2975.2104 5152.0166 -2975.2888 5151.9856 C-2975.2544 5152.0193 -2975.1897 5152.0613 -2975.0759 5152.1143 Cf-2975.1096 5151.9092 m-2975.0522 5151.9287 -2975.0071 5151.9395 -2974.9641 5151.9512 C-2974.9431 5151.8792 -2974.9617 5151.8335 -2975.1096 5151.9092 Cf-2975.5583 5151.9407 m-2975.4631 5151.9336 -2975.3743 5151.9539 -2975.2888 5151.9856 C-2975.3215 5151.9558 -2975.3352 5151.9319 -2975.3264 5151.917 C-2975.3752 5151.9236 -2975.4441 5151.9326 -2975.5583 5151.9407 cf-3035.2932 5155.9558 m-3035.3042 5155.9424 -3035.3169 5155.9336 -3035.3289 5155.9153 C-3035.4968 5156.0952 -3035.4231 5156.0667 -3035.2932 5155.9558 Cf-2995.7783 5156.6563 m-2995.7705 5156.6519 -2995.7664 5156.6404 -2995.7593 5156.636 C-2995.7671 5156.6311 -2995.7769 5156.625 -2995.7839 5156.6199 C-2995.7783 5156.6563 Lf-2996.3762 5156.979 m-2996.1216 5156.4392 -2995.9768 5156.5056 -2995.7839 5156.6199 C-2995.9817 5155.3694 L-2996.3762 5156.979 Lf*u-3019.5383 5157.1416 m-3019.1184 5157.532 L-3019.6252 5158.1736 -3019.9919 5157.9524 -3019.5977 5158.5 C-3019.5383 5157.1416 -3017.9656 5158.3616 -3017.9072 5157.0039 C-3017.6304 5157.2896 L-3017.7097 5157.2766 -3017.7224 5157.3562 -3017.8008 5157.3433 C-3017.2625 5157.9934 -3017.4009 5156.3616 -3016.7073 5156.5542 C-3016.4656 5156.6582 -3016.2969 5156.855 -3016.4617 5157.0166 C-3015.9231 5156.6807 L-3015.7664 5156.7073 -3015.8047 5156.9431 -3015.9607 5156.917 C-3015.1392 5156.8086 L-3015.1453 5156.8484 L-3015.0281 5156.636 -3014.7625 5156.3064 -3014.6328 5156.1663 C-3014.4241 5156.3616 -3014.7375 5156.3103 -3014.6841 5156.479 C-3014.2292 5156.1504 L-3014.0439 5156.5032 -3014.4209 5156.844 -3014.7351 5156.7935 C-3014.3103 5158.1494 -3014.3577 5156.4524 -3013.4409 5157.2444 C-3013.8704 5157.4163 L-3013.5935 5158.1863 -3013.2583 5157.9072 -3012.7727 5158.3875 C-3012.8879 5158.1367 -3013.7449 5157.1775 -3013.2512 5156.8391 C-3013.1121 5156.9414 -3012.9287 5156.99 -3012.6624 5156.7168 C-3012.6599 5157.2 -3012.3999 5157.0811 -3012.0745 5157.0535 C-3012.0967 5157.6936 L-3011.7449 5157.5088 -3011.7727 5157.1831 -3011.5657 5156.8953 C-3011.1736 5156.9583 -3011.0923 5157.4536 -3011 5157.8711 C-3010.3721 5157.9727 -3011.4336 5157.0767 -3010.6904 5156.9558 C-3010.1682 5157.2007 -3009.8015 5156.9392 -3009.1768 5156.5564 C-3008.8113 5156.7776 -3009.2407 5156.948 -3009.1096 5157.1311 C-3008.7856 5156.6206 L-3008.7063 5156.6331 -3008.7319 5156.7896 -3008.7449 5156.8687 C-3008.4719 5156.6707 -3008.7224 5156.229 -3008.2932 5156.0559 C-3008.1775 5155.3511 -3007.4121 5157.0852 -3006.8809 5156.2854 C-3006.75 5156.4673 -3006.9441 5156.6775 -3006.9041 5156.9253 C-3006.1753 5156.3999 -3006.2793 5156.5435 -3005.6809 5155.8367 C-3005.1711 5156.2566 L-3005.5457 5155.7766 -3005.0671 5155.2083 -3004.6479 5154.7415 C-3004.7808 5154.5093 -3004.8943 5154.3064 -3004.9705 5154.2095 C-3004.3015 5153.8662 L-3004.2207 5153.9712 -3004.2881 5154.1912 -3004.3977 5154.4583 C-3004.3521 5154.4055 -3004.3088 5154.3533 -3004.2751 5154.3047 C-3004.0359 5154.5413 -3004.1599 5154.9104 -3004.3313 5155.2676 C-3004.4128 5155.1416 -3004.4937 5155.0071 -3004.5723 5154.8728 C-3004.7375 5155.2615 -3004.8921 5155.6919 -3004.8577 5156.0667 C-3004.8142 5155.9927 -3004.7305 5155.9292 -3004.6384 5155.8936 C-3004.6816 5155.9993 -3004.7092 5156.0935 -3004.6892 5156.1575 c-3004.6665 5156.2246 -3004.5967 5156.0833 -3004.4873 5155.9197 C-3004.3352 5156.6331 L-3004.2983 5156.3499 L-3003.4231 5156.7959 L-3002.7969 5156.0784 -3002.2522 5155.021 -3001.2583 5154.7271 C-3001.5049 5155.25 -3001.3113 5155.5811 -3001.3247 5156.2007 C-3001.5959 5155.5447 -3002.0945 5156.479 -3002.6096 5156.3462 c-3002.3408 5156.4153 -3002.3999 5156.7112 -3002.4683 5156.813 C-3001.5496 5156.2168 L-3001.5703 5156.7239 -3001.3545 5156.5967 -3001.1145 5156.8064 C-3001.2959 5155.8047 -3000.4297 5156.1392 -3000.0559 5155.8323 C-3000.0327 5156.1682 -3000.1223 5156.5122 -3000.5784 5156.4304 C-3000.0752 5157.1848 -2999.9282 5155.2544 -2999.4343 5155.8953 C-2999.5457 5155.9031 -2999.6057 5155.8518 -2999.6497 5156.0232 C-2999.3896 5155.7239 -2998.7537 5155.9612 -2998.9033 5156.2534 C-2999.0144 5156.2603 L-2998.2751 5156.3792 -2996.7639 5156.2676 -2996.6536 5155.417 C-2996.6462 5155.5276 -2996.7505 5156.4424 -2996.7952 5156.6143 C-2995.4761 5153.7527 L-2995.5923 5154.4832 -2995.1462 5156.2224 -2995.7593 5156.636 C-2995.5833 5156.74 -2995.3655 5156.8616 -2994.9944 5156.6033 C-2995.1145 5156.4993 -2995.2937 5155.5471 -2995.1296 5155.48 C-2994.6792 5156.2932 -2994.8169 5155.9153 -2994.2617 5156.6084 C-2994.4417 5156.4524 -2994.2417 5155.3064 -2993.9573 5155.3433 C-2994.0017 5155.5144 -2993.9336 5156.4734 -2994.0376 5156.5928 C-2993.3296 5155.4683 L-2993.5063 5155.6707 -2993.3608 5156.4214 -2993.2024 5156.74 C-2993.2759 5156.5193 -2992.5903 5156.76 -2992.4016 5156.6487 C-2992.7017 5156.3875 L-2991.9023 5156.5579 -2991.9121 5154.8064 -2991.1191 5154.8655 C-2991.2151 5155.0974 -2991.3562 5156.2952 -2990.9529 5156.4363 C-2990.7681 5155.8606 -2990.1345 5153.6663 -2989.4329 5153.2227 C-2989.2983 5153.552 L-2988.76 5153.1768 L-2989.0952 5154.0435 -2990.0359 5155.8672 -2990.5496 5156.5767 C-2990.2505 5156.8374 -2990.4663 5156.9656 -2990.0183 5156.9351 C-2989.8601 5157.2439 -2990.2625 5157.4031 -2990.3943 5157.4214 C-2989.3513 5157.6206 L-2989.3977 5156.948 -2988.5537 5156.9463 -2988.5935 5156.386 C-2989.7263 5157.0833 L-2989.7722 5156.4119 -2989.0713 5155.1753 -2988.3323 5155.2932 C-2988.1443 5155.5613 -2988.4729 5156.49 -2988.4575 5156.7144 C-2988.3616 5156.4832 -2987.7561 5156.2722 -2987.6882 5156.4363 C-2988.0017 5156.7959 L-2987.5903 5157.0486 -2987.3303 5155.9048 -2986.8359 5156.5464 C-2986.6653 5156.5896 -2986.3264 5157.4119 -2986.2969 5157.0144 C-2986.5752 5156.2471 -2986.6296 5153.8743 -2986.4441 5153.2979 C-2986.3843 5153.3499 -2985.5481 5154.0313 -2985.3533 5154.4104 C-2985.0723 5155.0122 -2985.7751 5155.844 -2985.5359 5156.3606 C-2985.5256 5156.1768 -2985.3704 5155.9502 -2985.3057 5155.8772 C-2985.1265 5156.0342 -2985.3799 5156.4463 -2984.9905 5156.3633 C-2984.9255 5155.6824 -2984.1985 5156.4207 -2984.8064 5155.7871 C-2984.4255 5155.5923 -2984.4016 5155.9282 -2983.9543 5155.8975 C-2984.0967 5155.4573 -2983.5527 5154.3992 -2983.1711 5154.2039 C-2983.1936 5154.3772 -2983.1079 5154.6033 -2983.0664 5154.7063 C-2982.2856 5154.7676 -2981.8665 5155.0774 -2981.1384 5155.0833 C-2981.0713 5155.2483 -2980.72 5155.448 -2980.8696 5155.7415 C-2980.7649 5155.6206 -2980.6687 5155.3894 -2980.4441 5155.3733 C-2980.0095 5155.9624 -2980.9448 5155.4646 -2980.6135 5156.1736 C-2980.5852 5155.7776 -2980.0327 5155.626 -2979.7129 5155.3792 C-2979.8113 5154.7671 -2980.4519 5155.2615 -2980.7722 5155.5088 C-2980.7737 5154.6653 -2980.2161 5153.7815 -2979.4551 5153.3911 C-2978.8503 5153.1814 -2979.1929 5153.9363 -2979.0879 5153.8167 C-2977.9519 5153.9639 -2978.1201 5152.3433 -2977.1768 5152.9524 C-2976.8025 5153.4895 -2977.1599 5154.021 -2977.0769 5154.4092 C-2977.5696 5154.6128 -2977.8333 5154.0679 -2978.1672 5154.0896 C-2977.7561 5154.344 L-2977.9128 5154.5232 -2978.2417 5154.6582 -2978.4209 5154.5032 C-2978.1072 5154.9856 -2976.5017 5154.5952 -2975.6252 5155.0413 C-2975.4695 5154.8616 -2975.2007 5154.6743 -2975.3279 5154.4583 C-2975.6052 5154.5332 L-2975.8601 5154.0999 -2975.0833 5153.9336 -2975.4343 5153.7312 C-2975.0623 5153.4263 -2974.6453 5152.9473 -2974.1216 5153.1924 C-2974.0232 5153.8054 L-2974.0344 5153.626 -2974.3655 5153.4407 -2974.5127 5153.6272 c-2974.2944 5153.355 -2973.7097 5154.4573 -2973.4705 5153.6543 C-2973.8376 5153.2295 L-2973.4641 5152.9214 -2973.0024 5152.2703 -2972.5383 5152.4639 C-2972.7495 5151.8584 -2972.6453 5152.5332 -2972.9751 5151.8247 C-2972.6892 5152.7063 -2974.1624 5151.7876 -2973.7031 5152.7134 C-2974.0415 5151.8916 -2974.2888 5152.3655 -2974.7312 5151.6638 C-2974.7175 5151.8662 -2974.5745 5152.0513 -2974.9641 5151.9512 C-2974.9817 5152.0103 -2975.0232 5152.0852 -2975.0496 5152.1294 C-2975.0615 5152.1243 -2975.0657 5152.1206 -2975.0759 5152.1143 C-2975.0681 5152.1223 -2975.0623 5152.1311 -2975.0544 5152.1382 C-2975.0713 5152.1687 -2975.0728 5152.1753 -2975.0464 5152.146 C-2974.9536 5152.2356 -2974.8784 5152.3416 -2974.8479 5152.4539 C-2975.0413 5152.9182 -2975.6609 5152.9038 -2975.8704 5153.1443 C-2976.1016 5153.0479 -2975.7737 5152.9119 -2975.8999 5152.6963 C-2976.2129 5153.0559 L-2976.2439 5152.6072 -2976.8271 5152.3096 -2976.2825 5152.0464 C-2976.7727 5152.0264 L-2977.0613 5151.7747 -2977.4583 5151.6743 -2977.7031 5151.8633 C-2977.9343 5151.7664 -2978.2871 5152.3606 -2978.0857 5152.0088 C-2978.8545 5152.2871 L-2978.8616 5152.1753 L-2979.6201 5152.1184 -2980.4231 5152.9192 -2981.2903 5152.1079 C-2981.5457 5152.2212 -2981.8096 5152.3599 -2982.2368 5152.2327 C-2982.3201 5151.844 L-2982.6479 5151.979 -2983.3047 5151.4551 -2983.4456 5151.8599 C-2983.7993 5150.8142 -2985.0369 5151.6316 -2985.6135 5151.4463 C-2985.6353 5151.9536 L-2986.0322 5151.9253 -2986.4128 5152.0696 -2986.9055 5152.2727 C-2986.8752 5152.7207 L-2987.3 5153.0884 -2987.9673 5152.4019 -2988.6392 5152.448 C-2988.5935 5152.2766 -2988.4231 5152.3213 -2988.3025 5152.4253 C-2989.1052 5151.4119 -2989.9961 5153.1614 -2990.7241 5152.4236 C-2990.9055 5152.5872 -2991.0369 5152.5313 -2991.1641 5152.4192 C-2991.1472 5152.4175 -2991.1321 5152.4092 -2991.1191 5152.3953 C-2991.1377 5152.3904 -2991.1653 5152.3887 -2991.1936 5152.3894 C-2991.2737 5152.3123 -2991.3562 5152.2227 -2991.4456 5152.1509 C-2991.3696 5152.26 -2991.2969 5152.3496 -2991.2336 5152.3911 C-2991.3735 5152.4004 -2991.5857 5152.4558 -2991.7937 5152.5686 C-2991.8823 5152.0872 L-2991.8992 5152.0935 -2991.9128 5152.0923 -2991.9304 5152.1006 C-2992.1345 5151.9231 -2992.0945 5152.3286 -2991.9856 5152.6912 C-2992.0903 5152.77 -2992.1863 5152.8655 -2992.2607 5152.9812 C-2992.4265 5152.2039 -2992.8064 5153.2432 -2993.0327 5152.4143 C-2993.1729 5152.8184 -2994.0784 5152.7183 -2994.1892 5153.5696 C-2994.1963 5153.4583 -2994.2576 5153.4055 -2994.1453 5153.3982 C-2994.3772 5153.3015 -2994.6089 5153.2046 -2994.8169 5153.4446 C-2994.9153 5152.8323 L-2995.4216 5153.6553 L-2995.7292 5153.282 -2995.8567 5153.0652 -2995.5513 5152.594 C-2996.2888 5153.3196 -2996.1497 5152.8672 -2996.7769 5153.5852 C-2996.7463 5153.1895 L-2996.9705 5153.2046 -2997.3289 5153.7356 -2997.4641 5153.4082 C-2997.9656 5152.6553 -2999.9456 5153.3042 -3001.2329 5152.604 C-3000.9832 5153.77 -3001.8313 5152.0823 -3001.8823 5152.9856 C-3001.9573 5152.7102 -3002.1367 5152.5542 -3001.9282 5152.3152 C-3002.5852 5152.5852 -3002.9153 5151.8772 -3003.3689 5152.6392 C-3003.4441 5152.3623 -3003.2283 5152.2356 -3003.2952 5152.0713 C-3003.3479 5152.1311 -3003.5039 5152.3113 -3003.5723 5152.146 c-3003.6392 5151.9822 -3003.4761 5151.9153 -3003.3721 5151.7952 C-3004.0432 5151.8416 -3004.1111 5152.6912 -3004.1599 5153.4883 C-3004.5 5153.1111 -3004.6697 5153.1638 -3004.9153 5153.6873 C-3005.0337 5153.4263 -3005.2312 5153.1536 -3004.8142 5153.0598 C-3005.0488 5153.0215 -3006.2473 5152.6775 -3006.2712 5153.3167 C-3006.3447 5153.1543 -3006.5991 5153.2693 -3006.6609 5153.3433 C-3007.1873 5153.3047 -3007.2336 5153.2471 -3007.7505 5153.3079 C-3007.6072 5153.4119 L-3007.8113 5154.1831 -3008.0369 5153.584 -3008.4536 5153.6768 C-3008.4417 5153.5984 L-3009.3972 5153.0415 -3008.8542 5153.8643 -3009.7969 5153.229 C-3009.7456 5153.709 L-3009.8335 5154.7405 -3010.5808 5153.1006 -3011.1279 5153.4951 C-3010.9304 5153.7693 L-3011.2292 5154.1223 -3011.7656 5152.3662 -3012.0657 5152.2371 C-3012.1311 5152.1472 -3011.9624 5152.0935 -3011.8711 5152.0276 C-3012.6567 5151.4182 -3011.9729 5152.6553 -3012.5583 5152.8015 C-3012.6663 5152.4624 -3012.4192 5151.9392 -3012.8132 5151.8762 C-3013.0095 5151.6023 -3013.9561 5152.9768 -3014.4937 5152.3267 C-3014.3752 5152.5879 -3014.2576 5152.8484 -3014.5295 5153.0447 C-3014.9463 5153.1382 -3015.6563 5152.0579 -3016.0327 5152.8816 C-3016.0857 5152.8096 -3016.1057 5152.7415 -3016.1079 5152.6763 C-3016.4265 5152.8887 -3017.1433 5153.0291 -3017.3352 5153.4756 C-3017.6296 5151.8191 -3019.3159 5154.2815 -3019.3088 5152.7534 C-3020.2888 5152.8352 L-3020.2632 5152.6792 L-3020.8896 5152.5784 -3021.1111 5152.9446 -3021.3313 5153.3113 C-3021.4761 5153.2073 -3021.3704 5153.0642 -3021.3584 5152.9846 C-3022.2737 5152.6763 -3022.3647 5152.7415 -3023.1321 5153.5032 C-3023.2119 5153.0071 L-3023.4199 5153.2952 -3024.5352 5152.2295 -3025.4329 5152.8079 C-3025.4241 5152.751 -3025.4055 5152.6553 -3025.3342 5152.5852 C-3026.3442 5153.167 -3027.7522 5151.2112 -3028.1223 5153.0159 C-3028.7888 5153.4607 L-3027.9265 5153.6006 -3028.9172 5154.2444 -3028.5625 5154.5435 C-3028.9016 5154.6494 -3029.4392 5153.9993 -3029.0225 5153.9063 C-3028.9573 5153.9966 L-3028.8042 5153.0559 -3030.0288 5153.6631 -3030.0056 5153.0222 C-3031.7024 5153.0696 -3033.3562 5152.5479 -3034.9456 5152.5078 C-3034.7625 5153.2393 L-3035.3169 5153.1975 L-3035.4624 5153.0276 -3035.5122 5152.625 -3035.1167 5152.6553 C-3035.3247 5152.2405 -3035.78 5153.0032 -3035.7913 5153.1614 C-3036.5657 5152.8655 -3035.4888 5152.3086 -3035.7263 5152.2913 C-3036.0488 5152.3455 L-3035.9761 5152.4312 L-3036.2375 5152.73 -3036.2607 5153.0471 -3036.7361 5153.0112 C-3037.0369 5152.8643 -3036.8904 5152.5598 -3037.0088 5152.532 C-3037.0081 5152.479 -3037.0481 5152.4551 -3037.1904 5152.5103 C-3037.8889 5152.448 L-3037.6096 5153.0254 L-3037.9192 5153.3103 -3038.2664 5152.9951 -3037.9441 5153.6494 c-3038.4172 5152.6404 -3040.5496 5153.2871 -3040.8401 5152.9744 C-3041.2737 5153.3953 -3041.7017 5153.3875 -3042.2319 5153.3367 C-3042.1001 5153.4573 -3042.0212 5154.1062 -3042.4785 5154.0271 C-3042.3113 5152.6873 -3043.3159 5153.4456 -3043.6855 5152.4812 C-3043.3552 5153.1206 -3044.9856 5152.6392 -3044.4673 5153.5471 C-3044.8489 5153.438 -3044.4905 5153.0454 -3044.78 5152.73 C-3045.6882 5153.2493 -3046.7815 5152.3926 -3047.9041 5152.5679 C-3047.9216 5152.7444 -3047.7336 5153.0127 -3047.9744 5153.2747 C-3048.5671 5152.3953 L-3048.7888 5152.4812 -3048.7712 5153.4104 -3049.1763 5152.8 C-3049.1191 5152.948 -3049.0337 5153.1707 -3049.1824 5153.2271 C-3051.3816 5152.3704 -3053.6763 5153.9292 -3055.9097 5152.3191 C-3055.6072 5152.6604 -3055.8088 5152.6936 -3056.0398 5152.7063 C-3055.8896 5152.7876 -3056.0432 5153.1404 -3056.0137 5153.3792 C-3056.9487 5152.7168 L-3057.1191 5153.3784 -3057.9512 5152.7615 -3058.0488 5153.3943 C-3057.7527 5153.28 L-3058.1465 5154.0271 -3057.2017 5154.9395 -3057.2593 5155.8975 C-3056.8184 5155.0486 -3056.0967 5157.1543 -3055.3733 5155.9395 C-3055.2136 5156.1353 -3055.5095 5156.2483 -3055.4241 5156.4702 C-3055.2407 5156.0598 -3055.0193 5155.9744 -3054.6089 5156.1582 C-3054.6553 5156.26 L-3053.5024 5156.1599 -3053.0081 5156.5647 -3051.7129 5156.834 C-3051.8088 5156.3606 L-3051.5305 5156.4236 -3051.4719 5156.5723 -3051.3416 5156.6912 C-3051.0222 5155.9727 -3052.1233 5156.6504 -3051.8323 5155.8584 C-3051.4631 5156.8223 -3049.8696 5155.8728 -3049.6201 5156.9683 C-3049.1919 5156.9744 -3049.7456 5156.4197 -3049.3176 5156.4263 C-3049.2041 5156.7227 L-3049.0959 5156.3408 L-3048.8152 5156.4038 -3048.6736 5156.7747 -3048.6631 5157.0254 C-3048.7312 5156.9956 -3048.8567 5157.0955 -3048.9297 5157.1172 C-3048.5657 5157.4663 -3047.9033 5156.9983 -3047.7783 5157.1118 C-3048.1897 5156.9292 L-3047.0212 5156.6519 -3045.5945 5157.0413 -3044.4656 5156.438 C-3044.5513 5156.2151 L-3043.6892 5155.8015 -3043.8608 5156.4607 -3042.9143 5156.2693 C-3042.9487 5156.3223 L-3042.7593 5156.0999 -3042.5063 5155.9871 -3042.2473 5156.0127 C-3042.4863 5156.2747 -3041.7976 5156.521 -3042.1111 5156.8113 C-3041.1763 5156.3672 -3041.6487 5156.4624 -3041.0313 5155.6316 C-3040.8889 5156.0032 L-3040.6785 5155.667 -3040.6609 5155.49 -3040.1882 5155.3943 C-3040.5759 5155.7124 -3039.8865 5155.959 -3040.3208 5156.3799 C-3039.3289 5157.1912 -3038.8479 5155.5613 -3038.3928 5156.7471 C-3037.9373 5155.7207 -3039.2512 5156.1775 -3038.9961 5155.9575 C-3039.2097 5155.6223 -3038.6201 5155.1902 -3038.3088 5155.2932 C-3037.9919 5155.3167 -3037.77 5156.6072 -3036.9729 5156.5872 C-3037.0522 5156.5823 -3037.0576 5156.6604 -3037.1367 5156.6553 C-3036.8384 5156.917 -3036.5522 5156.3008 -3036.1863 5156.7263 C-3035.9812 5156.105 -3035.7112 5156.7615 -3035.6521 5155.9702 C-3036.3833 5156.1536 L-3035.9688 5155.9463 -3035.5801 5155.02 -3034.8972 5155.4695 C-3034.9504 5155.6287 -3035.1536 5155.8391 -3035.2932 5155.9558 C-3035.0935 5156.1895 -3034.9087 5155.8015 -3034.7017 5156.0413 C-3034.7607 5156.8335 -3035.5903 5156.2134 -3036.0344 5156.8174 C-3035.8201 5157.1519 -3035.1943 5156.2439 -3035.4175 5157.1016 c-3035.0967 5156.0112 -3034.6321 5157.24 -3034.0923 5156.4063 C-3034.1279 5156.8806 L-3034.0425 5156.8064 -3033.8655 5156.5823 -3033.7083 5156.594 C-3033.9929 5157.2095 L-3033.5559 5156.6848 -3033.1504 5157.6692 -3032.7312 5157.3831 C-3033.6089 5157.3975 -3032.9282 5156.8113 -3033.2993 5156.4646 C-3032.2168 5155.8296 -3032.6768 5157.7063 -3031.4648 5157.4783 C-3031.6289 5157.5454 -3032.0808 5157.1936 -3031.8242 5156.9734 C-3031.5935 5157.0713 -3031.2888 5157.2534 -3031.1472 5157.5032 C-3030.3442 5157.4038 -3031.2705 5157.0144 -3030.9287 5156.7224 C-3030.6553 5157.3008 -3030.5344 5156.4871 -3030.1824 5156.302 C-3030.1799 5156.7847 L-3029.2649 5157.094 -3029.9373 5155.7791 -3029.1135 5156.1536 C-3029.4617 5156.8223 L-3029.0322 5156.6494 L-3029.1208 5157.198 L-3028.6536 5156.7913 -3028.5081 5156.896 -3028.0503 5157.0503 C-3028.1567 5156.7112 -3027.9905 5156.1753 -3027.5852 5156.1599 C-3027.3088 5156.4463 -3027.74 5156.6184 -3027.1655 5156.5496 C-3027.2952 5156.8511 -3027.4373 5157.23 -3027.6873 5156.7864 C-3027.7129 5156.9436 -3027.8152 5157.0884 -3027.8416 5157.2444 C-3027.5439 5157.5735 -3027.0935 5157.3191 -3026.8855 5157.3142 C-3026.9656 5157.2964 -3027.0613 5157.2703 -3027.1104 5157.2024 C-3026.2776 5156.5332 L-3026.1465 5156.7144 -3026.2505 5156.8599 -3026.3535 5157.0032 C-3026.1848 5156.9502 -3026.0681 5156.7283 -3025.8201 5156.6873 C-3025.8843 5157.0791 -3025.8689 5157.4839 -3026.22 5157.6687 C-3025.4265 5157.2334 L-3025.3735 5157.4038 -3025.0193 5157.7024 -3025.1223 5157.8462 C-3024.6824 5158.0767 -3024.0432 5157.0852 -3023.46 5157.3894 C-3023.4297 5157.3135 -3023.3689 5157.2405 -3023.2449 5157.1848 C-3022.6968 5157.2732 -3022.2112 5157.7544 -3021.5615 5157.2173 C-3021.1929 5157.9197 L-3020.6841 5157.7603 -3021.6919 5157.0342 -3020.8447 5156.7693 C-3020.2449 5156.5447 -3020.6208 5157.3687 -3020.4104 5157.5642 C-3020.1121 5157.2102 -3019.5935 5156.4888 -3019.0425 5157.0613 C-3019.2249 5157.1936 -3019.3679 5157.0896 -3019.5383 5157.1416 Cf1 D-3013.2632 5156.8301 m-3013.3848 5156.9312 -3013.6272 5157.2439 -3013.7161 5156.959 C-3013.5776 5156.4063 -3013.4705 5156.6707 -3013.2632 5156.8301 Cf-3003.7241 5155.6692 m-3003.8145 5155.8279 -3003.9543 5155.7493 -3004.1121 5155.5667 C-3003.9976 5155.5271 -3003.8679 5155.5447 -3003.7241 5155.6692 Cf-2977.1511 5152.3096 m-2977.1563 5152.3174 -2977.1599 5152.3232 -2977.1641 5152.3333 C-2977.4353 5152.1453 -2977.3391 5152.22 -2977.1511 5152.3096 Cf0 D-2976.5879 5152.5193 m-2976.5313 5152.4524 -2976.5352 5152.3848 -2976.5591 5152.3174 C-2976.5984 5152.4392 -2976.7249 5152.448 -2976.8689 5152.4136 C-2976.8289 5152.5398 -2976.7561 5152.6272 -2976.5879 5152.5193 Cf1 D-3037.0713 5152.709 m-3036.9617 5152.8352 L-3037.2092 5152.9744 -3037.1399 5152.8484 -3037.0713 5152.709 Cf*U0 D-3004.8057 5156.3286 m-3004.8401 5156.2471 -3004.8496 5156.1575 -3004.8577 5156.0667 C-3004.9055 5156.1475 -3004.9065 5156.2415 -3004.8057 5156.3286 Cf-3023.4409 5157.3953 m-3023.4473 5157.3911 -3023.4536 5157.3926 -3023.46 5157.3894 C-3023.4705 5157.4182 -3023.4761 5157.448 -3023.4792 5157.4768 C-3023.4409 5157.3953 Lf-2985.3123 5156.6096 m-2985.4282 5156.5398 -2985.4929 5156.4524 -2985.5359 5156.3606 C-2985.5422 5156.4783 -2985.4895 5156.5784 -2985.3123 5156.6096 Cf-2973.6033 5151.6992 m-2973.9641 5151.8247 L-2973.7896 5151.8008 -2973.7273 5151.9063 -2973.6392 5151.9832 C-2973.6472 5151.8704 -2973.7161 5151.7073 -2973.6033 5151.6992 Cf-2970.4719 5154.6848 m-2970.4192 5154.6255 -2970.3601 5154.678 -2970.3081 5154.6184 C-2970.3225 5154.3943 L-2970.5471 5154.4087 -2970.7041 5154.5896 -2970.4719 5154.6848 Cf-2973.2693 5153.302 m-2973.2407 5153.7083 -2973.0144 5153.5703 -2972.7617 5153.4951 C-2972.7769 5153.4966 -2972.7913 5153.5 -2972.8064 5153.4951 C-2972.7319 5152.9282 -2973.0012 5153.1152 -2973.2693 5153.302 Cf-2972.7031 5153.4812 m-2972.6252 5153.4624 -2972.5457 5153.4524 -2972.4695 5153.4712 C-2972.4399 5153.2439 -2972.5642 5153.4236 -2972.7031 5153.4812 Cf-2975.8735 5152.25 m-2975.7537 5152.354 -2975.7983 5151.7312 -2975.7305 5151.896 C-2975.5967 5151.3799 -2976.5295 5152.521 -2975.8735 5152.25 Cf-2973.0647 5154.6392 m-2973.1553 5154.1382 L-2973.2969 5154.542 L-2973.0647 5154.6392 Lf-2975.0601 5154.271 m-2974.6563 5154.4104 L-2974.6624 5154.3264 -2974.6111 5154.2776 -2974.5481 5154.24 C-2974.7969 5154.2224 -2975.0696 5154.1233 -2975.0601 5154.271 Cf-2974.5481 5154.24 m-2974.4185 5154.2493 -2974.2952 5154.2383 -2974.2231 5154.1563 C-2974.2932 5154.1614 -2974.4441 5154.178 -2974.5481 5154.24 Cf-2973.6167 5154.7896 m-2973.7361 5154.6851 L-2974.0212 5154.6487 L-2973.6167 5154.7896 Lf-2979.4009 5154.1753 m-2979.8416 5154.3184 L-2979.8865 5154.49 -2979.7664 5154.5952 -2979.6023 5154.5271 C-2979.4968 5154.4072 -2979.3333 5154.3408 -2979.4009 5154.1753 Cf-2978.0681 5155.5471 m-2978.1873 5155.4431 -2978.1953 5155.3311 -2978.2625 5155.1663 C-2978.2759 5155.7871 L-2978.0681 5155.5471 Lf-2979.3533 5155.6919 m-2979.3972 5155.8643 -2979.9929 5156.1863 -2979.4343 5156.1475 C-2979.3896 5155.9768 -2978.9482 5155.8335 -2979.3533 5155.6919 Cf-2985.9937 5154.9063 m-2985.8816 5154.8982 L-2985.8977 5153.8799 L-2985.9937 5154.9063 Lf-2991.8464 5157.3433 m-2991.3242 5157.5872 -2991.7224 5156.7144 -2991.2505 5157.0193 C-2991.1279 5156.7783 -2991.6362 5156.7703 -2991.5105 5156.5623 C-2991.8257 5156.8167 -2991.9912 5156.6736 -2991.8464 5157.3433 Cf-2991.5105 5156.5623 m-2991.46 5156.5222 -2991.4065 5156.4734 -2991.3496 5156.4082 C-2991.4409 5156.4712 -2991.4839 5156.52 -2991.5105 5156.5623 Cf-3057.5745 5152.1924 m-3057.9104 5151.98 L-3057.6936 5152.3223 L-3057.5745 5152.1924 Lf-3058.2192 5152.948 m-3058.2983 5152.2991 L-3058.5 5152.886 L-3058.4241 5152.8572 -3058.2769 5152.8015 -3058.2192 5152.948 Cf-3012.3303 5158.1375 m-3012.3047 5157.9812 L-3012.3567 5157.8123 -3012.4353 5157.8 -3012.5928 5157.7732 C-3012.3303 5158.1375 Lf-3016.8848 5157.6519 m-3016.8064 5157.6653 L-3016.9529 5157.0784 L-3016.8848 5157.6519 Lf-3020.7073 5158.4004 m-3020.5513 5158.4253 -3020.3679 5158.2942 -3020.2112 5158.3196 C-3020.5513 5158.4253 -3020.7495 5157.6692 -3020.7073 5158.4004 CfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au1 Ap0 J 0 j 1 w 10 M []0 d0 XR-6903.4036 9031 m-6930.5408 9031 L-6930.5408 9010.9818 L-6903.4036 9010.9818 L-6903.4036 9031 Ln0 Ap0 O0.531395 0.324193 0.202792 0.042084 0.513725 0.6 0.694118 Xa4 M-6931 9031 m-6903 9031 L-6903 9024.2663 L-6931 9024.2663 L-6931 9031 Lf0.258122 0.130404 0.133516 0.001434 0.784314 0.823529 0.847059 Xa-6931 9024.2687 m-6903 9024.2687 L-6903 9023.1079 L-6931 9023.1079 L-6931 9024.2687 Lf0.420111 0.234684 0.132815 0.010163 0.627451 0.701961 0.792157 Xa-6903 9023.1079 m-6903 9010.9818 L-6931 9010.9818 L-6931 9023.1079 L-6903 9023.1079 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 10 M []0 d0 XR-6931 9031 m-6903 9031 L-6903 9003 L-6931 9003 L-6931 9031 Lnuq-6903.4592 9007.0187 m-6927.0369 9007.0187 l-6907.0187 9027.0369 l-6903.4592 9027.0369 l-6903.4592 9007.0187 lhWn0 O0.531395 0.324193 0.202792 0.042084 0.513725 0.6 0.694118 Xa4 M-6903 9007.0187 m-6931 9007.0187 L-6931 9013.7523 L-6903 9013.7523 L-6903 9007.0187 Lf0.258122 0.130404 0.133516 0.001434 0.784314 0.823529 0.847059 Xa-6903 9013.7499 m-6931 9013.7499 L-6931 9014.9108 L-6903 9014.9108 L-6903 9013.7499 Lf0.420111 0.234684 0.132815 0.010163 0.627451 0.701961 0.792157 Xa-6931 9014.9108 m-6931 9027.0369 L-6903 9027.0369 L-6903 9014.9108 L-6931 9014.9108 LfQ0 Aq0 J 0 j 1 w 10 M []0 d0 XR-6927.0369 9030.5964 m-6927.0369 9007.0187 l-6907.0187 9027.0369 l-6907.0187 9030.5964 l-6927.0369 9030.5964 lhWn0 O0.531395 0.324193 0.202792 0.042084 0.513725 0.6 0.694118 Xa4 M-6927.0369 9003 m-6927.0369 9031 L-6920.3032 9031 L-6920.3032 9003 L-6927.0369 9003 Lf0.258122 0.130404 0.133516 0.001434 0.784314 0.823529 0.847059 Xa-6920.3056 9003 m-6920.3056 9031 L-6919.1448 9031 L-6919.1448 9003 L-6920.3056 9003 Lf0.420111 0.234684 0.132815 0.010163 0.627451 0.701961 0.792157 Xa-6919.1448 9031 m-6907.0187 9031 L-6907.0187 9003 L-6919.1448 9003 L-6919.1448 9031 LfQUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 5)0 Au0 J 0 j 1 w 10 M []0 d0 XR-6931 9031 m-6903 9031 L-6903 9003 L-6931 9003 L-6931 9031 Lnuq-6906.9631 9030.5408 m-6906.9631 9026.9813 l-6926.9813 9006.9631 l-6926.9813 9030.5408 l-6906.9631 9030.5408 lhWn0 O0.531395 0.324193 0.202792 0.042084 0.513725 0.6 0.694118 Xa4 M-6906.9631 9031 m-6906.9631 9003 L-6913.6968 9003 L-6913.6968 9031 L-6906.9631 9031 Lf0.258122 0.130404 0.133516 0.001434 0.784314 0.823529 0.847059 Xa-6913.6944 9031 m-6913.6944 9003 L-6914.8552 9003 L-6914.8552 9031 L-6913.6944 9031 Lf0.420111 0.234684 0.132815 0.010163 0.627451 0.701961 0.792157 Xa-6914.8552 9003 m-6926.9813 9003 L-6926.9813 9031 L-6914.8552 9031 L-6914.8552 9003 LfQ0 Aq0 J 0 j 1 w 10 M []0 d0 XR-6903.4036 9026.9813 m-6906.9631 9026.9813 l-6926.9813 9006.9631 l-6903.4036 9006.9631 l-6903.4036 9026.9813 lhWn0 O0.531395 0.324193 0.202792 0.042084 0.513725 0.6 0.694118 Xa4 M-6931 9026.9813 m-6903 9026.9813 L-6903 9020.2477 L-6931 9020.2477 L-6931 9026.9813 Lf0.258122 0.130404 0.133516 0.001434 0.784314 0.823529 0.847059 Xa-6931 9020.2501 m-6903 9020.2501 L-6903 9019.0892 L-6931 9019.0892 L-6931 9020.2501 Lf0.420111 0.234684 0.132815 0.010163 0.627451 0.701961 0.792157 Xa-6903 9019.0892 m-6903 9006.9631 L-6931 9006.9631 L-6931 9019.0892 L-6903 9019.0892 LfQUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Calligraphi) -(c Brush Tool/ 10 pt. Round/ Adobe Calligraphic Brush Tool/ 3 p) -(t. Oval/ Adobe Calligraphic Brush Tool/ Touch Calligraphic Bru) -(sh/ Adobe ArtOnPath Brush Tool/ Charcoal - Feather/ Adobe Patt) -(ernOnPath Brush Tool/ Silver/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(10 pt. Round)(1 10 10 100 100 0 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Oval)(1 3 3 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Touch Calligraphic Brush)(1 0 24 100 100 0 0 2 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal - Feather)(1 / Unnamed 6/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.911711 0.786862 0.619532 0.974487 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.911711 0.786862 0.619532 0.974487 0 0 0 Xa(Black)Pc0 0.947417 0.9122 0 1 0 0 Xa(RGB Red)Pc0.095491 0 0.952239 0 1 1 0 Xa(RGB Yellow)Pc0.647517 0 1 0 0 1 0 Xa(RGB Green)Pc0.569543 0 0.153536 0 0 1 1 Xa(RGB Cyan)Pc0.933257 0.745968 0 0 0 0 1 Xa(RGB Blue)Pc0.4112 0.777737 0 0 1 0 1 Xa(RGB Magenta)Pc0.168734 0.949279 0.821378 0.06894 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0 0.946044 0.854887 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.751736 0.888853 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501274 0.908873 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.36582 0.818448 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.06714 0 0.852934 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.233005 0 0.890867 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.524651 0 0.878508 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.717311 0 0.876371 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.842466 0.143984 0.926299 0.021576 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.897978 0.323857 0.926238 0.248203 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.736751 0 0.689906 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.765469 0.044648 0.451087 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.71014 0.130922 0.00177 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.866697 0.492561 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.975952 0.895476 0 0.000855 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 0.968475 0.323766 0.220218 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.756069 0.923705 0 0.000031 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.540429 0.929442 0 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.324895 1 0.236545 0.167269 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.098909 0.982696 0.408087 0.020935 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.933593 0.144961 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.220462 0.272618 0.388739 0.061189 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.354864 0.386358 0.466438 0.211795 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.445869 0.470863 0.527184 0.380529 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.534539 0.543023 0.552666 0.54226 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.204105 0.377295 0.594751 0.084779 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.279973 0.462196 0.67068 0.207187 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.324773 0.536522 0.7608 0.329229 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.359655 0.604791 0.857969 0.451484 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.391241 0.683345 0.943328 0.57113 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.474342 0.746395 0.824887 0.730831 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (White, Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(White, Black)PcBb2 (Gold Dust) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Gold Dust)PcBb2 (Blue Sky) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Blue Sky)Pc(Jive) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Jive)Pc0.583856 0 0.222141 0 0.396078 0.784314 0.815686 Xa(C=56 M=0 Y=20 K=0)Pc0.555108 0.444617 0 0 0.513725 0.545098 0.772549 Xa(C=51 M=43 Y=0 K=0)Pc0.312169 0.439185 0.001709 0 0.729412 0.607843 0.788235 Xa(C=26 M=41 Y=0 K=0)Pc0.911711 0.786862 0.619532 0.974487 0 0 0 Xa(R=0 G=0 B=0)Pc0.762295 0.667903 0.606867 0.828611 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.690333 0.595453 0.560021 0.655329 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.62002 0.523888 0.504051 0.47776 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.559869 0.453986 0.448859 0.326848 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.492012 0.386114 0.384894 0.202182 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.411383 0.320134 0.324315 0.110109 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.325963 0.244572 0.255253 0.043549 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.232029 0.170626 0.181155 0.008301 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.115602 0.081605 0.091798 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.062074 0.042573 0.051759 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Logo) Ln0 Au0 O0.853269 0.356634 0.328557 0.15433 0 0.45098 0.541176 Xa0 J 0 j 1 w 10 M []0 d0 XR-155.2855 114.2029 m-94.0597 128.7092 -28.8102 99.8987 7.27725 47.3879 C-24.8433 112.0837 -98.3406 150.017 -166.8224 133.7997 c-242.5207 115.8732 -283.3773 38.5649 -258.0957 -38.8659 c-253.2662 -53.6651 -246.3582 -67.3852 -237.8366 -79.7846 C-241.2179 -72.9621 -244.1485 -65.8585 -246.5658 -58.4554 c-271.8495 18.9663 -230.9871 96.2764 -155.2855 114.2029 cf/BBAccumRotation (4.987428) XT0.138979 0 0.704372 0 0.921569 0.917647 0.388235 Xa-309.5397 -23.6191 m-338.2738 37.2923 -325.8777 105.3338 -283.4627 145.5496 C-338.6679 108.4843 -357.9524 31.4403 -325.8228 -36.6827 c-290.3227 -111.9779 -205.4162 -147.8472 -136.2085 -116.8041 c-122.9977 -110.8616 -111.3082 -102.9049 -101.2872 -93.4054 C-107.1141 -97.3102 -113.3282 -100.7853 -119.9218 -103.7565 c-189.1294 -134.8 -274.0291 -98.927 -309.5397 -23.6191 cf0.527855 0 1 0 0.54902 0.792157 0 Xa-277.9088 32.2585 m-270.6547 101.4433 -218.5346 150.9083 -153.0169 158.1926 C-229.3365 161.5542 -293.5532 108.8285 -301.6768 31.4617 c-310.6418 -54.0606 -247.6643 -137.3097 -161.0129 -154.4801 c-144.4619 -157.7531 -128.2409 -158.3583 -112.771 -156.6455 C-120.82 -156.2925 -128.9919 -155.3179 -137.2434 -153.6869 c-223.9108 -136.5074 -286.8775 -53.2762 -277.9088 32.2585 cf/BBAccumRotation (6.132539) XTUu*u0.232029 0.170626 0.181155 0.008301 0.8 0.8 0.8 Xa15.6869 -81.2703 m15.6869 -103.8667 L13.1362 -103.8667 L13.1362 -81.2703 L15.6869 -81.2703 lf*U*u43.7591 -81.2703 m46.2455 -81.2703 L46.2455 -103.8667 L44.2117 -103.8667 L29.6199 -85.3364 L29.6199 -103.8667 L27.135 -103.8667 L27.135 -81.2703 L29.5225 -81.2703 L43.7591 -99.3796 L43.7591 -81.2703 lf*U*u67.7859 -104.2535 m61.265 -104.2535 56.4548 -99.1204 56.4548 -92.6014 c56.4548 -86.1441 61.2312 -80.8817 67.8819 -80.8817 c71.9818 -80.8817 74.4347 -82.3353 76.6943 -84.4651 c74.9513 -86.3375 L73.0469 -84.5309 70.9171 -83.2386 67.8499 -83.2386 c62.8463 -83.2386 59.1015 -87.275 59.1015 -92.5356 c59.1015 -97.7984 62.8783 -101.8983 67.8499 -101.8983 c70.9487 -101.8983 72.9829 -100.7038 75.1446 -98.6377 c76.824 -100.2833 l74.4667 -102.6722 71.8844 -104.2535 67.7859 -104.2535 cf*U*u95.945 -104.2535 m89.069 -104.2535 84.4525 -98.8631 84.4525 -92.6014 c84.4525 -86.3375 89.133 -80.8817 96.009 -80.8817 c102.885 -80.8817 107.5015 -86.2739 107.5015 -92.5356 c107.5015 -98.7995 102.8192 -104.2535 95.945 -104.2535 cf1 D95.945 -83.2386 m90.78 -83.2386 87.0988 -87.3706 87.0988 -92.5356 c87.0988 -97.7006 90.844 -101.8983 96.009 -101.8983 c101.174 -101.8983 104.8534 -97.7664 104.8534 -92.6014 c104.8534 -87.4364 101.11 -83.2386 95.945 -83.2386 cf*U*u0 D133.268 -103.8667 m126.7151 -95.0863 L120.2579 -95.0863 L120.2579 -103.8667 L117.709 -103.8667 L117.709 -81.2703 L127.4251 -81.2703 L132.3963 -81.2703 135.5911 -83.9486 135.5911 -88.0169 c135.5911 -91.7937 133.0088 -93.9892 129.4589 -94.6337 c136.3988 -103.8667 L133.268 -103.8667 lf1 D127.2313 -83.6254 m120.2579 -83.6254 L120.2579 -92.7948 L127.1997 -92.7948 L130.5879 -92.7948 133.0088 -91.0518 133.0088 -88.1125 c133.0088 -85.3048 130.8791 -83.6254 127.2313 -83.6254 cf*U*u0 D153.9048 -95.8936 m148.417 -95.8936 L148.417 -103.8667 L145.8681 -103.8667 L145.8681 -81.2703 L154.3257 -81.2703 L159.4249 -81.2703 162.783 -83.9805 162.783 -88.4694 c162.783 -93.3753 158.715 -95.8936 153.9048 -95.8936 cf1 D154.132 -83.6254 m148.417 -83.6254 L148.417 -93.5687 L154.0026 -93.5687 L157.7477 -93.5687 160.2006 -91.5683 160.2006 -88.565 c160.2006 -85.3048 157.7793 -83.6254 154.132 -83.6254 cf*U*u0 D182.7454 -104.2535 m175.8694 -104.2535 171.2529 -98.8631 171.2529 -92.6014 c171.2529 -86.3375 175.9334 -80.8817 182.8094 -80.8817 c189.6855 -80.8817 194.3019 -86.2739 194.3019 -92.5356 c194.3019 -98.7995 189.6196 -104.2535 182.7454 -104.2535 cf1 D182.7454 -83.2386 m177.5804 -83.2386 173.8992 -87.3706 173.8992 -92.5356 c173.8992 -97.7006 177.6444 -101.8983 182.8094 -101.8983 c187.9744 -101.8983 191.6538 -97.7664 191.6538 -92.6014 c191.6538 -87.4364 187.9104 -83.2386 182.7454 -83.2386 cf*U*u0 D220.0684 -103.8667 m213.5156 -95.0863 L207.0583 -95.0863 L207.0583 -103.8667 L204.5094 -103.8667 L204.5094 -81.2703 L214.2255 -81.2703 L219.1968 -81.2703 222.3919 -83.9486 222.3919 -88.0169 c222.3919 -91.7937 219.8093 -93.9892 216.2593 -94.6337 c223.1993 -103.8667 L220.0684 -103.8667 lf1 D214.0317 -83.6254 m207.0583 -83.6254 L207.0583 -92.7948 L214.0001 -92.7948 L217.3883 -92.7948 219.8093 -91.0518 219.8093 -88.1125 c219.8093 -85.3048 217.6795 -83.6254 214.0317 -83.6254 cf*U*u0 D253.7153 -103.8667 m250.9716 -103.8667 L248.325 -97.894 L236.0248 -97.894 L233.3446 -103.8667 L230.7303 -103.8667 L241.0284 -81.1089 L243.4173 -81.1089 L253.7153 -103.8667 lf1 D242.1908 -84.0783 m237.0258 -95.6028 L247.3239 -95.6028 L242.1908 -84.0783 lf*U*u0 D268.6371 -103.8667 m266.0548 -103.8667 L266.0548 -83.6254 L258.4689 -83.6254 L258.4689 -81.2703 L276.2231 -81.2703 L276.2231 -83.6254 L268.6371 -83.6254 L268.6371 -103.8667 lf*U*u302.1564 -83.5938 m288.3724 -83.5938 L288.3724 -91.3091 L300.7046 -91.3091 L300.7046 -93.6344 L288.3724 -93.6344 L288.3724 -101.5417 L302.3178 -101.5417 L302.3178 -103.8667 L285.8235 -103.8667 L285.8235 -81.2703 L302.1564 -81.2703 L302.1564 -83.5938 lf*U*u320.1167 -103.8667 m312.2734 -103.8667 L312.2734 -81.2703 L320.1167 -81.2703 L327.2181 -81.2703 332.1258 -86.1441 332.1258 -92.5356 c332.1258 -98.927 327.2181 -103.8667 320.1167 -103.8667 cf1 D320.1167 -83.6254 m314.8223 -83.6254 L314.8223 -101.5097 L320.1167 -101.5097 L325.8303 -101.5097 329.4777 -97.6366 329.4777 -92.6014 c329.4777 -87.564 325.8303 -83.6254 320.1167 -83.6254 cf*UUu*u0 D0.527855 0 1 0 0.54902 0.792157 0 Xa156.5213 16.8613 m109.9137 16.8613 L109.9137 -4.5603 L151.2247 -4.5603 L151.2247 -17.5064 L109.9137 -17.5064 L109.9137 -39.6343 L157.1105 -39.6343 L157.1105 -52.5805 L95.4357 -52.5805 L95.4357 29.8092 L156.5213 29.8092 L156.5213 16.8613 lf*U*u212.5447 -53.9934 m188.5335 -53.9934 170.6423 -35.2788 170.6423 -11.5036 c170.6423 12.0372 188.1802 31.2222 213.1321 31.2222 c228.3163 31.2222 237.4962 25.9241 245.3824 18.3913 c236.0836 7.68138 L229.4933 13.8013 222.4308 17.9209 213.0151 17.9209 c197.243 17.9209 185.8268 4.97474 185.8268 -11.2677 c185.8268 -27.5097 197.243 -40.6921 213.0151 -40.6921 c223.1371 -40.6921 229.6104 -36.5725 236.6729 -29.9822 c245.9698 -39.3984 l237.3792 -48.3438 227.9634 -53.9934 212.5447 -53.9934 cf*U*u298.1045 -53.9934 m272.7992 -53.9934 255.1443 -34.8084 255.1443 -11.5036 c255.1443 11.801 273.0355 31.2222 298.3404 31.2222 c323.6453 31.2222 341.3006 12.0372 341.3006 -11.2677 c341.3006 -34.5722 323.4112 -53.9934 298.1045 -53.9934 cf1 D298.1045 17.9209 m281.745 17.9209 270.3289 4.85769 270.3289 -11.2677 c270.3289 -27.3926 281.9809 -40.6921 298.3404 -40.6921 c314.7016 -40.6921 326.1178 -27.6289 326.1178 -11.5036 c326.1178 4.62141 314.4654 17.9209 298.1045 17.9209 cf*UUu*u0 D0.853269 0.356634 0.328557 0.15433 0 0.45098 0.541176 Xa-146.8475 -52.5805 m-163.6363 -52.5805 L-182.7042 -25.2396 L-191.5769 -34.4729 L-191.5769 -52.5805 L-206.0868 -52.5805 L-206.0868 34.9601 L-191.5769 34.9601 L-191.5769 -17.3254 L-165.3153 10.7359 L-147.6868 10.7359 L-172.8696 -15.0463 L-146.8475 -52.5805 lf*U*u-136.054 20.4501 m-136.054 34.2396 L-120.4652 34.2396 L-120.4652 20.4501 L-136.054 20.4501 lf-135.4543 -52.5805 m-135.4543 10.7359 L-120.9443 10.7359 L-120.9443 -52.5805 L-135.4543 -52.5805 lf*U*u-87.4853 -52.5805 m-101.9953 -52.5805 L-101.9953 10.7359 L-87.4853 10.7359 L-87.4853 0.903145 L-83.4083 6.89876 -77.5316 12.0547 -67.6984 12.0547 c-53.4284 12.0547 -45.1555 2.46148 -45.1555 -12.288 c-45.1555 -52.5805 L-59.6654 -52.5805 L-59.6654 -16.6046 L-59.6654 -6.77185 -64.5818 -1.13647 -73.215 -1.13647 c-81.6104 -1.13647 -87.4853 -7.0114 -87.4853 -16.8445 C-87.4853 -52.5805 lf*U*u1.61533 -42.1476 m8.6902 -42.1476 13.7272 -39.51 18.7629 -34.5936 c27.2772 -42.1476 L21.2816 -49.3431 13.0068 -54.0199 1.37578 -54.0199 c-16.9717 -54.0199 -31.1228 -40.7081 -31.1228 -21.0419 c-31.1228 -2.81549 -18.2904 12.0547 -0.182554 12.0547 c19.9628 12.0547 30.1561 -3.77404 30.1561 -22.1211 c30.1561 -23.4399 30.0354 -24.6398 29.9166 -26.0793 c-16.6129 -26.0793 l-14.9338 -36.3915 -7.73832 -42.1476 1.61533 -42.1476 cf1 D15.765 -16.4857 m14.8065 -7.13208 9.28998 0.182319 -0.303237 0.182319 c-9.17779 0.182319 -15.4133 -6.65298 -16.7321 -16.4857 C15.765 -16.4857 lf*U*u0 D62.2963 -32.7939 m62.2963 -38.4308 65.1734 -40.7081 70.0898 -40.7081 c73.329 -40.7081 76.2061 -39.9891 79.085 -38.55 c79.085 -50.4223 L75.4875 -52.4598 71.4104 -53.6597 66.0127 -53.6597 c55.3403 -53.6597 47.7863 -48.9829 47.7863 -35.0727 c47.7863 -1.73443 L39.7511 -1.73443 L39.7511 10.7359 L47.7863 10.7359 L47.7863 28.1248 L62.2963 28.1248 L62.2963 10.7359 L79.3246 10.7359 L79.3246 -1.73443 L62.2963 -1.73443 L62.2963 -32.7939 lf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF